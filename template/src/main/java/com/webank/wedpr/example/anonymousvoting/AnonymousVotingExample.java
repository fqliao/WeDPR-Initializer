package com.webank.wedpr.example.anonymousvoting;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.DynamicArray;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint8;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;

/**
 * Auto generated code.
 *
 * <p><strong>Do not modify!</strong>
 *
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the <a
 * href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class AnonymousVotingExample extends Contract {
    public static String BINARY =
            "";

    public static final String ABI =
            "[{\"constant\":true,\"inputs\":[],\"name\":\"getVoteResultStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCandidates\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"voterTableName\",\"type\":\"string\"},{\"name\":\"blankBallot\",\"type\":\"string\"}],\"name\":\"queryVoteStoragePart\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"regulationInfoTableName\",\"type\":\"string\"},{\"name\":\"blankBallot\",\"type\":\"string\"},{\"name\":\"regulationInfoPb\",\"type\":\"string\"}],\"name\":\"insertRegulationInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidates\",\"type\":\"string[]\"}],\"name\":\"setCandidates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVoteStorageSumTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"counterTableName\",\"type\":\"string\"},{\"name\":\"systemParameters\",\"type\":\"string\"},{\"name\":\"voteStorage\",\"type\":\"string\"},{\"name\":\"hPointShare\",\"type\":\"string\"},{\"name\":\"decryptedRequest\",\"type\":\"string\"}],\"name\":\"verifyCountRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"voterTableName\",\"type\":\"string\"},{\"name\":\"counterTableName\",\"type\":\"string\"},{\"name\":\"regulationInfoTableName\",\"type\":\"string\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"voterTableName\",\"type\":\"string\"},{\"name\":\"systemParameters\",\"type\":\"string\"},{\"name\":\"voteRequest\",\"type\":\"string\"}],\"name\":\"verifyBoundedVoteRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"regulationInfoTableName\",\"type\":\"string\"},{\"name\":\"blankBallot\",\"type\":\"string\"}],\"name\":\"queryRegulationInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"systemParameters\",\"type\":\"string\"},{\"name\":\"voteStorageSum\",\"type\":\"string\"},{\"name\":\"decryptedResultPartStorageSum\",\"type\":\"string\"},{\"name\":\"voteResultRequest\",\"type\":\"string\"}],\"name\":\"verifyVoteResult\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"counterTableName\",\"type\":\"string\"},{\"name\":\"counterId\",\"type\":\"string\"},{\"name\":\"hPointShare\",\"type\":\"string\"}],\"name\":\"insertHPointShare\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDecryptedResultPartStorageSumTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"voterTableName\",\"type\":\"string\"},{\"name\":\"systemParameters\",\"type\":\"string\"},{\"name\":\"voteRequest\",\"type\":\"string\"}],\"name\":\"verifyUnboundedVoteRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"counterTableName\",\"type\":\"string\"},{\"name\":\"counterId\",\"type\":\"string\"}],\"name\":\"queryHPointShare\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHPoint\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"nextContractState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]";

    public static final String FUNC_GETVOTERESULTSTORAGE = "getVoteResultStorage";

    public static final String FUNC_GETCANDIDATES = "getCandidates";

    public static final String FUNC_QUERYVOTESTORAGEPART = "queryVoteStoragePart";

    public static final String FUNC_INSERTREGULATIONINFO = "insertRegulationInfo";

    public static final String FUNC_SETCANDIDATES = "setCandidates";

    public static final String FUNC_GETVOTESTORAGESUMTOTAL = "getVoteStorageSumTotal";

    public static final String FUNC_VERIFYCOUNTREQUEST = "verifyCountRequest";

    public static final String FUNC_INIT = "init";

    public static final String FUNC_VERIFYBOUNDEDVOTEREQUEST = "verifyBoundedVoteRequest";

    public static final String FUNC_QUERYREGULATIONINFO = "queryRegulationInfo";

    public static final String FUNC_VERIFYVOTERESULT = "verifyVoteResult";

    public static final String FUNC_INSERTHPOINTSHARE = "insertHPointShare";

    public static final String FUNC_CONTRACTSTATE = "contractState";

    public static final String FUNC_GETDECRYPTEDRESULTPARTSTORAGESUMTOTAL =
            "getDecryptedResultPartStorageSumTotal";

    public static final String FUNC_VERIFYUNBOUNDEDVOTEREQUEST = "verifyUnboundedVoteRequest";

    public static final String FUNC_QUERYHPOINTSHARE = "queryHPointShare";

    public static final String FUNC_GETHPOINT = "getHPoint";

    public static final String FUNC_NEXTCONTRACTSTATE = "nextContractState";

    @Deprecated
    protected AnonymousVotingExample(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected AnonymousVotingExample(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected AnonymousVotingExample(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected AnonymousVotingExample(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<String> getVoteResultStorage() {
        final Function function =
                new Function(
                        FUNC_GETVOTERESULTSTORAGE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<List> getCandidates() {
        final Function function =
                new Function(
                        FUNC_GETCANDIDATES,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result =
                                (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<List> queryVoteStoragePart(String voterTableName, String blankBallot) {
        final Function function =
                new Function(
                        FUNC_QUERYVOTESTORAGEPART,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(blankBallot)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result =
                                (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> insertRegulationInfo(
            String regulationInfoTableName, String blankBallot, String regulationInfoPb) {
        final Function function =
                new Function(
                        FUNC_INSERTREGULATIONINFO,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        regulationInfoTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(blankBallot),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        regulationInfoPb)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void insertRegulationInfo(
            String regulationInfoTableName,
            String blankBallot,
            String regulationInfoPb,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_INSERTREGULATIONINFO,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        regulationInfoTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(blankBallot),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        regulationInfoPb)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String insertRegulationInfoSeq(
            String regulationInfoTableName, String blankBallot, String regulationInfoPb) {
        final Function function =
                new Function(
                        FUNC_INSERTREGULATIONINFO,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        regulationInfoTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(blankBallot),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        regulationInfoPb)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> setCandidates(List<String> candidates) {
        final Function function =
                new Function(
                        FUNC_SETCANDIDATES,
                        Arrays.<Type>asList(
                                candidates.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        candidates,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setCandidates(List<String> candidates, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETCANDIDATES,
                        Arrays.<Type>asList(
                                candidates.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        candidates,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setCandidatesSeq(List<String> candidates) {
        final Function function =
                new Function(
                        FUNC_SETCANDIDATES,
                        Arrays.<Type>asList(
                                candidates.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        candidates,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<String> getVoteStorageSumTotal() {
        final Function function =
                new Function(
                        FUNC_GETVOTESTORAGESUMTOTAL,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> verifyCountRequest(
            String counterTableName,
            String systemParameters,
            String voteStorage,
            String hPointShare,
            String decryptedRequest) {
        final Function function =
                new Function(
                        FUNC_VERIFYCOUNTREQUEST,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(counterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(systemParameters),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voteStorage),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(hPointShare),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        decryptedRequest)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void verifyCountRequest(
            String counterTableName,
            String systemParameters,
            String voteStorage,
            String hPointShare,
            String decryptedRequest,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_VERIFYCOUNTREQUEST,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(counterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(systemParameters),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voteStorage),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(hPointShare),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        decryptedRequest)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String verifyCountRequestSeq(
            String counterTableName,
            String systemParameters,
            String voteStorage,
            String hPointShare,
            String decryptedRequest) {
        final Function function =
                new Function(
                        FUNC_VERIFYCOUNTREQUEST,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(counterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(systemParameters),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voteStorage),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(hPointShare),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        decryptedRequest)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> init(
            String voterTableName, String counterTableName, String regulationInfoTableName) {
        final Function function =
                new Function(
                        FUNC_INIT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(counterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        regulationInfoTableName)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void init(
            String voterTableName,
            String counterTableName,
            String regulationInfoTableName,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_INIT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(counterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        regulationInfoTableName)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String initSeq(
            String voterTableName, String counterTableName, String regulationInfoTableName) {
        final Function function =
                new Function(
                        FUNC_INIT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(counterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        regulationInfoTableName)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> verifyBoundedVoteRequest(
            String voterTableName, String systemParameters, String voteRequest) {
        final Function function =
                new Function(
                        FUNC_VERIFYBOUNDEDVOTEREQUEST,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(systemParameters),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voteRequest)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void verifyBoundedVoteRequest(
            String voterTableName,
            String systemParameters,
            String voteRequest,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_VERIFYBOUNDEDVOTEREQUEST,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(systemParameters),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voteRequest)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String verifyBoundedVoteRequestSeq(
            String voterTableName, String systemParameters, String voteRequest) {
        final Function function =
                new Function(
                        FUNC_VERIFYBOUNDEDVOTEREQUEST,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(systemParameters),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voteRequest)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<List> queryRegulationInfo(
            String regulationInfoTableName, String blankBallot) {
        final Function function =
                new Function(
                        FUNC_QUERYREGULATIONINFO,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        regulationInfoTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(blankBallot)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result =
                                (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> verifyVoteResult(
            String systemParameters,
            String voteStorageSum,
            String decryptedResultPartStorageSum,
            String voteResultRequest) {
        final Function function =
                new Function(
                        FUNC_VERIFYVOTERESULT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(systemParameters),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voteStorageSum),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        decryptedResultPartStorageSum),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        voteResultRequest)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void verifyVoteResult(
            String systemParameters,
            String voteStorageSum,
            String decryptedResultPartStorageSum,
            String voteResultRequest,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_VERIFYVOTERESULT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(systemParameters),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voteStorageSum),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        decryptedResultPartStorageSum),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        voteResultRequest)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String verifyVoteResultSeq(
            String systemParameters,
            String voteStorageSum,
            String decryptedResultPartStorageSum,
            String voteResultRequest) {
        final Function function =
                new Function(
                        FUNC_VERIFYVOTERESULT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(systemParameters),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voteStorageSum),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        decryptedResultPartStorageSum),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        voteResultRequest)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> insertHPointShare(
            String counterTableName, String counterId, String hPointShare) {
        final Function function =
                new Function(
                        FUNC_INSERTHPOINTSHARE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(counterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(counterId),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(hPointShare)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void insertHPointShare(
            String counterTableName,
            String counterId,
            String hPointShare,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_INSERTHPOINTSHARE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(counterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(counterId),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(hPointShare)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String insertHPointShareSeq(
            String counterTableName, String counterId, String hPointShare) {
        final Function function =
                new Function(
                        FUNC_INSERTHPOINTSHARE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(counterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(counterId),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(hPointShare)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<BigInteger> contractState() {
        final Function function =
                new Function(
                        FUNC_CONTRACTSTATE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> getDecryptedResultPartStorageSumTotal() {
        final Function function =
                new Function(
                        FUNC_GETDECRYPTEDRESULTPARTSTORAGESUMTOTAL,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> verifyUnboundedVoteRequest(
            String voterTableName, String systemParameters, String voteRequest) {
        final Function function =
                new Function(
                        FUNC_VERIFYUNBOUNDEDVOTEREQUEST,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(systemParameters),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voteRequest)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void verifyUnboundedVoteRequest(
            String voterTableName,
            String systemParameters,
            String voteRequest,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_VERIFYUNBOUNDEDVOTEREQUEST,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(systemParameters),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voteRequest)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String verifyUnboundedVoteRequestSeq(
            String voterTableName, String systemParameters, String voteRequest) {
        final Function function =
                new Function(
                        FUNC_VERIFYUNBOUNDEDVOTEREQUEST,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(systemParameters),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voteRequest)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<List> queryHPointShare(String counterTableName, String counterId) {
        final Function function =
                new Function(
                        FUNC_QUERYHPOINTSHARE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(counterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(counterId)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result =
                                (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<String> getHPoint() {
        final Function function =
                new Function(
                        FUNC_GETHPOINT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> nextContractState() {
        final Function function =
                new Function(
                        FUNC_NEXTCONTRACTSTATE,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void nextContractState(TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_NEXTCONTRACTSTATE,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String nextContractStateSeq() {
        final Function function =
                new Function(
                        FUNC_NEXTCONTRACTSTATE,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    @Deprecated
    public static AnonymousVotingExample load(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        return new AnonymousVotingExample(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static AnonymousVotingExample load(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        return new AnonymousVotingExample(
                contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static AnonymousVotingExample load(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new AnonymousVotingExample(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static AnonymousVotingExample load(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        return new AnonymousVotingExample(
                contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<AnonymousVotingExample> deploy(
            Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(
                AnonymousVotingExample.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<AnonymousVotingExample> deploy(
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(
                AnonymousVotingExample.class,
                web3j,
                transactionManager,
                contractGasProvider,
                BINARY,
                "");
    }

    @Deprecated
    public static RemoteCall<AnonymousVotingExample> deploy(
            Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(
                AnonymousVotingExample.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<AnonymousVotingExample> deploy(
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        return deployRemoteCall(
                AnonymousVotingExample.class,
                web3j,
                transactionManager,
                gasPrice,
                gasLimit,
                BINARY,
                "");
    }
}
