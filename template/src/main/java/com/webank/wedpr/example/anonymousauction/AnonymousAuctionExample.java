package com.webank.wedpr.example.anonymousauction;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.DynamicArray;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint8;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple2;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;

/**
 * Auto generated code.
 *
 * <p><strong>Do not modify!</strong>
 *
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the <a
 * href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class AnonymousAuctionExample extends Contract {
    public static String BINARY =
            "";

    public static final String ABI =
            "[{\"constant\":true,\"inputs\":[],\"name\":\"claimWinnerCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"publicKey\",\"type\":\"string\"}],\"name\":\"queryRegulationInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bidType\",\"type\":\"uint8\"}],\"name\":\"uploadBidType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"functionName\",\"type\":\"string\"},{\"name\":\"criticalSize\",\"type\":\"uint256\"}],\"name\":\"registerParallelFunction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bidderTableName\",\"type\":\"string\"},{\"name\":\"_bidderIdTableName\",\"type\":\"string\"},{\"name\":\"_regulationInfoTableName\",\"type\":\"string\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"queryAllBidComparisonStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"biderId\",\"type\":\"string\"},{\"name\":\"bidRequest\",\"type\":\"string\"}],\"name\":\"uploadBidStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"functionName\",\"type\":\"string\"}],\"name\":\"unregisterParallelFunction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"querySystemParameters\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"queryBidWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableParallel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"winnerClaimRequest\",\"type\":\"string\"},{\"name\":\"allBidStorageRequest\",\"type\":\"string\"}],\"name\":\"verifyWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"publicKey\",\"type\":\"string\"},{\"name\":\"regulationInfo\",\"type\":\"string\"}],\"name\":\"insertRegulationInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableParallel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"nextContractState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bidType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"biderId\",\"type\":\"string\"}],\"name\":\"queryBidComparisonStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"biderId\",\"type\":\"string\"},{\"name\":\"bidComparisonRequest\",\"type\":\"string\"}],\"name\":\"uploadBidComparisonStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"queryAllBidStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]";

    public static final String FUNC_CLAIMWINNERCOUNTER = "claimWinnerCounter";

    public static final String FUNC_QUERYREGULATIONINFO = "queryRegulationInfo";

    public static final String FUNC_UPLOADBIDTYPE = "uploadBidType";

    public static final String FUNC_REGISTERPARALLELFUNCTION = "registerParallelFunction";

    public static final String FUNC_INIT = "init";

    public static final String FUNC_QUERYALLBIDCOMPARISONSTORAGE = "queryAllBidComparisonStorage";

    public static final String FUNC_UPLOADBIDSTORAGE = "uploadBidStorage";

    public static final String FUNC_UNREGISTERPARALLELFUNCTION = "unregisterParallelFunction";

    public static final String FUNC_QUERYSYSTEMPARAMETERS = "querySystemParameters";

    public static final String FUNC_QUERYBIDWINNER = "queryBidWinner";

    public static final String FUNC_CONTRACTSTATE = "contractState";

    public static final String FUNC_ENABLEPARALLEL = "enableParallel";

    public static final String FUNC_VERIFYWINNER = "verifyWinner";

    public static final String FUNC_INSERTREGULATIONINFO = "insertRegulationInfo";

    public static final String FUNC_DISABLEPARALLEL = "disableParallel";

    public static final String FUNC_NEXTCONTRACTSTATE = "nextContractState";

    public static final String FUNC_BIDTYPE = "bidType";

    public static final String FUNC_QUERYBIDCOMPARISONSTORAGE = "queryBidComparisonStorage";

    public static final String FUNC_UPLOADBIDCOMPARISONSTORAGE = "uploadBidComparisonStorage";

    public static final String FUNC_QUERYALLBIDSTORAGE = "queryAllBidStorage";

    @Deprecated
    protected AnonymousAuctionExample(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected AnonymousAuctionExample(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected AnonymousAuctionExample(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected AnonymousAuctionExample(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<BigInteger> claimWinnerCounter() {
        final Function function =
                new Function(
                        FUNC_CLAIMWINNERCOUNTER,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<List> queryRegulationInfo(String publicKey) {
        final Function function =
                new Function(
                        FUNC_QUERYREGULATIONINFO,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(publicKey)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result =
                                (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> uploadBidType(BigInteger _bidType) {
        final Function function =
                new Function(
                        FUNC_UPLOADBIDTYPE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(_bidType)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void uploadBidType(BigInteger _bidType, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_UPLOADBIDTYPE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(_bidType)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String uploadBidTypeSeq(BigInteger _bidType) {
        final Function function =
                new Function(
                        FUNC_UPLOADBIDTYPE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(_bidType)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> registerParallelFunction(
            String functionName, BigInteger criticalSize) {
        final Function function =
                new Function(
                        FUNC_REGISTERPARALLELFUNCTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(
                                        criticalSize)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void registerParallelFunction(
            String functionName, BigInteger criticalSize, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_REGISTERPARALLELFUNCTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(
                                        criticalSize)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String registerParallelFunctionSeq(String functionName, BigInteger criticalSize) {
        final Function function =
                new Function(
                        FUNC_REGISTERPARALLELFUNCTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(
                                        criticalSize)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> init(
            String _bidderTableName, String _bidderIdTableName, String _regulationInfoTableName) {
        final Function function =
                new Function(
                        FUNC_INIT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_bidderTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        _bidderIdTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        _regulationInfoTableName)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void init(
            String _bidderTableName,
            String _bidderIdTableName,
            String _regulationInfoTableName,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_INIT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_bidderTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        _bidderIdTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        _regulationInfoTableName)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String initSeq(
            String _bidderTableName, String _bidderIdTableName, String _regulationInfoTableName) {
        final Function function =
                new Function(
                        FUNC_INIT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_bidderTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        _bidderIdTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        _regulationInfoTableName)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<List> queryAllBidComparisonStorage() {
        final Function function =
                new Function(
                        FUNC_QUERYALLBIDCOMPARISONSTORAGE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result =
                                (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> uploadBidStorage(String biderId, String bidRequest) {
        final Function function =
                new Function(
                        FUNC_UPLOADBIDSTORAGE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(biderId),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(bidRequest)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void uploadBidStorage(
            String biderId, String bidRequest, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_UPLOADBIDSTORAGE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(biderId),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(bidRequest)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String uploadBidStorageSeq(String biderId, String bidRequest) {
        final Function function =
                new Function(
                        FUNC_UPLOADBIDSTORAGE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(biderId),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(bidRequest)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> unregisterParallelFunction(String functionName) {
        final Function function =
                new Function(
                        FUNC_UNREGISTERPARALLELFUNCTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void unregisterParallelFunction(String functionName, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_UNREGISTERPARALLELFUNCTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String unregisterParallelFunctionSeq(String functionName) {
        final Function function =
                new Function(
                        FUNC_UNREGISTERPARALLELFUNCTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> querySystemParameters() {
        final Function function =
                new Function(
                        FUNC_QUERYSYSTEMPARAMETERS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<Tuple2<String, BigInteger>> queryBidWinner() {
        final Function function =
                new Function(
                        FUNC_QUERYBIDWINNER,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Int256>() {}));
        return new RemoteCall<Tuple2<String, BigInteger>>(
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> contractState() {
        final Function function =
                new Function(
                        FUNC_CONTRACTSTATE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> enableParallel() {
        final Function function =
                new Function(
                        FUNC_ENABLEPARALLEL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void enableParallel(TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_ENABLEPARALLEL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String enableParallelSeq() {
        final Function function =
                new Function(
                        FUNC_ENABLEPARALLEL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> verifyWinner(
            String winnerClaimRequest, String allBidStorageRequest) {
        final Function function =
                new Function(
                        FUNC_VERIFYWINNER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        winnerClaimRequest),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        allBidStorageRequest)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void verifyWinner(
            String winnerClaimRequest,
            String allBidStorageRequest,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_VERIFYWINNER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        winnerClaimRequest),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        allBidStorageRequest)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String verifyWinnerSeq(String winnerClaimRequest, String allBidStorageRequest) {
        final Function function =
                new Function(
                        FUNC_VERIFYWINNER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        winnerClaimRequest),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        allBidStorageRequest)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> insertRegulationInfo(
            String publicKey, String regulationInfo) {
        final Function function =
                new Function(
                        FUNC_INSERTREGULATIONINFO,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(publicKey),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(regulationInfo)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void insertRegulationInfo(
            String publicKey, String regulationInfo, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_INSERTREGULATIONINFO,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(publicKey),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(regulationInfo)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String insertRegulationInfoSeq(String publicKey, String regulationInfo) {
        final Function function =
                new Function(
                        FUNC_INSERTREGULATIONINFO,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(publicKey),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(regulationInfo)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> disableParallel() {
        final Function function =
                new Function(
                        FUNC_DISABLEPARALLEL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void disableParallel(TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_DISABLEPARALLEL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String disableParallelSeq() {
        final Function function =
                new Function(
                        FUNC_DISABLEPARALLEL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> nextContractState() {
        final Function function =
                new Function(
                        FUNC_NEXTCONTRACTSTATE,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void nextContractState(TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_NEXTCONTRACTSTATE,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String nextContractStateSeq() {
        final Function function =
                new Function(
                        FUNC_NEXTCONTRACTSTATE,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<BigInteger> bidType() {
        final Function function =
                new Function(
                        FUNC_BIDTYPE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<List> queryBidComparisonStorage(String biderId) {
        final Function function =
                new Function(
                        FUNC_QUERYBIDCOMPARISONSTORAGE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(biderId)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result =
                                (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> uploadBidComparisonStorage(
            String biderId, String bidComparisonRequest) {
        final Function function =
                new Function(
                        FUNC_UPLOADBIDCOMPARISONSTORAGE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(biderId),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        bidComparisonRequest)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void uploadBidComparisonStorage(
            String biderId, String bidComparisonRequest, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_UPLOADBIDCOMPARISONSTORAGE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(biderId),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        bidComparisonRequest)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String uploadBidComparisonStorageSeq(String biderId, String bidComparisonRequest) {
        final Function function =
                new Function(
                        FUNC_UPLOADBIDCOMPARISONSTORAGE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(biderId),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        bidComparisonRequest)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<List> queryAllBidStorage() {
        final Function function =
                new Function(
                        FUNC_QUERYALLBIDSTORAGE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result =
                                (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    @Deprecated
    public static AnonymousAuctionExample load(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        return new AnonymousAuctionExample(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static AnonymousAuctionExample load(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        return new AnonymousAuctionExample(
                contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static AnonymousAuctionExample load(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new AnonymousAuctionExample(
                contractAddress, web3j, credentials, contractGasProvider);
    }

    public static AnonymousAuctionExample load(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        return new AnonymousAuctionExample(
                contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<AnonymousAuctionExample> deploy(
            Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(
                AnonymousAuctionExample.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<AnonymousAuctionExample> deploy(
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(
                AnonymousAuctionExample.class,
                web3j,
                transactionManager,
                contractGasProvider,
                BINARY,
                "");
    }

    @Deprecated
    public static RemoteCall<AnonymousAuctionExample> deploy(
            Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(
                AnonymousAuctionExample.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<AnonymousAuctionExample> deploy(
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        return deployRemoteCall(
                AnonymousAuctionExample.class,
                web3j,
                transactionManager,
                gasPrice,
                gasLimit,
                BINARY,
                "");
    }
}
