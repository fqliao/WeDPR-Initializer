package com.webank.wedpr.assethiding;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.DynamicArray;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple2;
import org.fisco.bcos.web3j.tuples.generated.Tuple3;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;

/**
 * Auto generated code.
 *
 * <p><strong>Do not modify!</strong>
 *
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the <a
 * href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class HiddenAssetExamplePerf extends Contract {
    public static String BINARY =
            "60806040526110066000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561005257600080fd5b50615018600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611001600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613611806100e86000396000f3006080604052600436106100ba576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630faaa8d5146100bf57806323c48a19146100e857806334a18dda146101275780633aeb91c6146101505780636b6f71c2146101795780637029144c146101b757806379fa913f146101e0578063a283c82a14610209578063bb60a69614610232578063bca926af1461025b578063d39f70bc14610272578063fd2d1b4014610289575b600080fd5b3480156100cb57600080fd5b506100e660048036036100e19190810190612d2e565b6102b2565b005b3480156100f457600080fd5b5061010f600480360361010a9190810190612bd4565b6107ab565b60405161011e9392919061321d565b60405180910390f35b34801561013357600080fd5b5061014e60048036036101499190810190612fa1565b610fa2565b005b34801561015c57600080fd5b5061017760048036036101729190810190612c56565b611073565b005b34801561018557600080fd5b506101a0600480360361019b9190810190612bd4565b611216565b6040516101ae929190613284565b60405180910390f35b3480156101c357600080fd5b506101de60048036036101d99190810190612c56565b611773565b005b3480156101ec57600080fd5b5061020760048036036102029190810190612bd4565b611b6e565b005b34801561021557600080fd5b50610230600480360361022b9190810190612d2e565b611c3c565b005b34801561023e57600080fd5b5061025960048036036102549190810190612c56565b611e23565b005b34801561026757600080fd5b50610270611fb4565b005b34801561027e57600080fd5b506102876120dd565b005b34801561029557600080fd5b506102b060048036036102ab9190810190612c56565b6121fe565b005b606080606060008060006102c5896107ab565b809650819750829850505050600086511480156102e3575060008551145b80156102f0575060008451145b606060405190810160405280602281526020017f74686520726567756c6174696f6e20696e666f20616c7265616479206578697381526020017f7473000000000000000000000000000000000000000000000000000000000000815250901515610390576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038791906132cf565b60405180910390fd5b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c960046040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161040991906133aa565b602060405180830381600087803b15801561042357600080fd5b505af1158015610437573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061045b9190810190612b82565b92508273ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156104c157600080fd5b505af11580156104d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104f99190810190612b59565b91508173ffffffffffffffffffffffffffffffffffffffff1663e942b5166040805190810160405280600b81526020017f7370656e744372656469740000000000000000000000000000000000000000008152508a6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610587929190613373565b600060405180830381600087803b1580156105a157600080fd5b505af11580156105b5573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b5166040805190810160405280600e81526020017f726567756c6174696f6e496e666f000000000000000000000000000000000000815250896040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610645929190613373565b600060405180830381600087803b15801561065f57600080fd5b505af1158015610673573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166331afac368a846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016106ce929190613343565b602060405180830381600087803b1580156106e857600080fd5b505af11580156106fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107209190810190612bab565b9050600181146040805190810160405280601d81526020017f6e6f207065726d697373696f6e206f72206f74686572206572726f727300000081525090151561079f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079691906132cf565b60405180910390fd5b50505050505050505050565b60608060606000806000806060806060600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c960046040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161083691906133aa565b602060405180830381600087803b15801561085057600080fd5b505af1158015610864573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506108889190810190612b82565b98508873ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156108ee57600080fd5b505af1158015610902573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506109269190810190612b07565b97508773ffffffffffffffffffffffffffffffffffffffff1663cd30a1d16040805190810160405280600d81526020017f63757272656e74437265646974000000000000000000000000000000000000008152508f6040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016109b4929190613373565b600060405180830381600087803b1580156109ce57600080fd5b505af11580156109e2573d6000803e3d6000fd5b505050508873ffffffffffffffffffffffffffffffffffffffff1663e8434e398e8a6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610a3d929190613313565b602060405180830381600087803b158015610a5757600080fd5b505af1158015610a6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a8f9190810190612b30565b96508673ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610af557600080fd5b505af1158015610b09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b2d9190810190612bab565b955085604051908082528060200260200182016040528015610b6357816020015b6060815260200190600190039081610b4e5790505b50945085604051908082528060200260200182016040528015610b9a57816020015b6060815260200190600190039081610b855790505b50935085604051908082528060200260200182016040528015610bd157816020015b6060815260200190600190039081610bbc5790505b509250600091505b85821015610f89578673ffffffffffffffffffffffffffffffffffffffff1663846719e0836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610c369190613269565b602060405180830381600087803b158015610c5057600080fd5b505af1158015610c64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610c889190810190612b59565b90508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040805190810160405280600d81526020017f63757272656e74437265646974000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610d1491906132cf565b600060405180830381600087803b158015610d2e57600080fd5b505af1158015610d42573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610d6b9190810190612c15565b8583815181101515610d7957fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040805190810160405280600b81526020017f7370656e744372656469740000000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610e1091906132cf565b600060405180830381600087803b158015610e2a57600080fd5b505af1158015610e3e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610e679190810190612c15565b8483815181101515610e7557fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040805190810160405280600e81526020017f726567756c6174696f6e496e666f0000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610f0c91906132cf565b600060405180830381600087803b158015610f2657600080fd5b505af1158015610f3a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610f639190810190612c15565b8383815181101515610f7157fe5b90602001906020020181905250816001019150610bd9565b8484849b509b509b505050505050505050509193909250565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630553904e3084846040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161101c939291906131df565b602060405180830381600087803b15801561103657600080fd5b505af115801561104a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061106e9190810190612bab565b505050565b61107b6128d0565b600060a0604051908101604052806020604051908101604052806000815250815260200160206040519081016040528060008152508152602001602060405190810160405280600081525081526020016020604051908101604052806000815250815260200160206040519081016040528060008152508152509150600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636c3e9922846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161116e91906132f1565b600060405180830381600087803b15801561118857600080fd5b505af115801561119c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506111c59190810190612dc5565b83935082925081915080905085600001866020018760400188606001849052849052849052849052505050506111fe8260000151612311565b905061120e8483606001516125f0565b905050505050565b60006060600080600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c960036040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161129891906133aa565b602060405180830381600087803b1580156112b257600080fd5b505af11580156112c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112ea9190810190612b82565b93508373ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561135057600080fd5b505af1158015611364573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113889190810190612b07565b92508273ffffffffffffffffffffffffffffffffffffffff1663cd30a1d16040805190810160405280600d81526020017f63757272656e7443726564697400000000000000000000000000000000000000815250896040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611416929190613373565b600060405180830381600087803b15801561143057600080fd5b505af1158015611444573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663e8434e3988856040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161149f929190613313565b602060405180830381600087803b1580156114b957600080fd5b505af11580156114cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114f19190810190612b30565b91508173ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561155757600080fd5b505af115801561156b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061158f9190810190612bab565b600014156115d5577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80905060206040519081016040528060008152509550955061176a565b8173ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161162b91906132b4565b602060405180830381600087803b15801561164557600080fd5b505af1158015611659573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061167d9190810190612b59565b905060008173ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040805190810160405280600d81526020017f63726564697453746f72616765000000000000000000000000000000000000008152506040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161170b91906132cf565b600060405180830381600087803b15801561172557600080fd5b505af1158015611739573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506117629190810190612c15565b819150955095505b50505050915091565b600080836003908051906020019061178c929190612900565b5082600490805190602001906117a3929190612900565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166356004b6a60036040805190810160405280600d81526020017f63757272656e74437265646974000000000000000000000000000000000000008152506040805190810160405280600d81526020017f63726564697453746f72616765000000000000000000000000000000000000008152506040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161188a939291906133cc565b602060405180830381600087803b1580156118a457600080fd5b505af11580156118b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118dc9190810190612bab565b9150600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166356004b6a60046040805190810160405280600d81526020017f63757272656e74437265646974000000000000000000000000000000000000008152506040805190810160405280601a81526020017f7370656e744372656469742c726567756c6174696f6e496e666f0000000000008152506040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016119c4939291906133cc565b602060405180830381600087803b1580156119de57600080fd5b505af11580156119f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611a169190810190612bab565b90506000821480611a4657507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff3caf82145b6040805190810160405280601d81526020017f6e6f207065726d697373696f6e206f72206f74686572206572726f7273000000815250901515611abf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab691906132cf565b60405180910390fd5b506000811480611aee57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff3caf81145b6040805190810160405280601d81526020017f6e6f207065726d697373696f6e206f72206f74686572206572726f7273000000815250901515611b67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5e91906132cf565b60405180910390fd5b5050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166311e3f2af30836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611be69291906131af565b602060405180830381600087803b158015611c0057600080fd5b505af1158015611c14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611c389190810190612bab565b5050565b611c44612980565b600060e06040519081016040528060206040519081016040528060008152508152602001602060405190810160405280600081525081526020016020604051908101604052806000815250815260200160206040519081016040528060008152508152602001602060405190810160405280600081525081526020016020604051908101604052806000815250815260200160206040519081016040528060008152508152509150600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630fc91f48846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611d6391906132f1565b600060405180830381600087803b158015611d7d57600080fd5b505af1158015611d91573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250611dba9190810190612e88565b8595508494508393508292508191508090508760000188602001896040018a6060018b6080018c60a001869052869052869052869052869052869052505050505050611e0a8583606001516125f0565b9050611e1a848360a001516125f0565b90505050505050565b60608060006020604051908101604052806000815250925060206040519081016040528060008152509150600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16624890d1856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611ec491906132f1565b600060405180830381600087803b158015611ede57600080fd5b505af1158015611ef2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250611f1b9190810190612cc2565b8093508194505050611f2d85836125f0565b9050600181146040805190810160405280601d81526020017f6e6f207065726d697373696f6e206f72206f74686572206572726f7273000000815250901515611fac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fa391906132cf565b60405180910390fd5b505050505050565b611ff46040805190810160405280601a81526020017f697373756543726564697428737472696e672c737472696e67290000000000008152506001610fa2565b6120346040805190810160405280601c81526020017f66756c66696c6c43726564697428737472696e672c737472696e6729000000008152506001610fa2565b6120746040805190810160405280602081526020017f7472616e7366657272656443726564697428737472696e672c737472696e67298152506001610fa2565b6120db606060405190810160405280602181526020017f73706c697443726564697428737472696e672c737472696e672c737472696e6781526020017f29000000000000000000000000000000000000000000000000000000000000008152506002610fa2565b565b61211b6040805190810160405280601a81526020017f697373756543726564697428737472696e672c737472696e6729000000000000815250611b6e565b6121596040805190810160405280601c81526020017f66756c66696c6c43726564697428737472696e672c737472696e672900000000815250611b6e565b6121976040805190810160405280602081526020017f7472616e7366657272656443726564697428737472696e672c737472696e6729815250611b6e565b6121fc606060405190810160405280602181526020017f73706c697443726564697428737472696e672c737472696e672c737472696e6781526020017f2900000000000000000000000000000000000000000000000000000000000000815250611b6e565b565b60608060006020604051908101604052806000815250925060206040519081016040528060008152509150600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638f16959a856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016122a091906132f1565b600060405180830381600087803b1580156122ba57600080fd5b505af11580156122ce573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506122f79190810190612cc2565b809350819450505061230883612311565b90505050505050565b6000806000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c960036040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161238e91906133aa565b602060405180830381600087803b1580156123a857600080fd5b505af11580156123bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506123e09190810190612b82565b91508173ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561244657600080fd5b505af115801561245a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061247e9190810190612b07565b90508073ffffffffffffffffffffffffffffffffffffffff1663cd30a1d16040805190810160405280600d81526020017f63757272656e7443726564697400000000000000000000000000000000000000815250866040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161250c929190613373565b600060405180830381600087803b15801561252657600080fd5b505af115801561253a573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff166328bb211785836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612595929190613313565b602060405180830381600087803b1580156125af57600080fd5b505af11580156125c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506125e79190810190612bab565b92505050919050565b6000806000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c960036040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161266d91906133aa565b602060405180830381600087803b15801561268757600080fd5b505af115801561269b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506126bf9190810190612b82565b91508173ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561272557600080fd5b505af1158015612739573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061275d9190810190612b59565b90508073ffffffffffffffffffffffffffffffffffffffff1663e942b5166040805190810160405280600d81526020017f63726564697453746f7261676500000000000000000000000000000000000000815250866040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016127eb929190613373565b600060405180830381600087803b15801561280557600080fd5b505af1158015612819573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff166331afac3686836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612874929190613343565b602060405180830381600087803b15801561288e57600080fd5b505af11580156128a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506128c69190810190612bab565b9250505092915050565b60a06040519081016040528060608152602001606081526020016060815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061294157805160ff191683800117855561296f565b8280016001018555821561296f579182015b8281111561296e578251825591602001919060010190612953565b5b50905061297c91906129be565b5090565b60e060405190810160405280606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b6129e091905b808211156129dc5760008160009055506001016129c4565b5090565b90565b60006129ef82516134f2565b905092915050565b6000612a038251613504565b905092915050565b6000612a178251613516565b905092915050565b6000612a2b8251613528565b905092915050565b6000612a3f825161353a565b905092915050565b600082601f8301121515612a5a57600080fd5b8135612a6d612a6882613445565b613418565b91508082526020830160208301858383011115612a8957600080fd5b612a94838284613584565b50505092915050565b600082601f8301121515612ab057600080fd5b8151612ac3612abe82613445565b613418565b91508082526020830160208301858383011115612adf57600080fd5b612aea838284613593565b50505092915050565b6000612aff8235613544565b905092915050565b600060208284031215612b1957600080fd5b6000612b27848285016129e3565b91505092915050565b600060208284031215612b4257600080fd5b6000612b50848285016129f7565b91505092915050565b600060208284031215612b6b57600080fd5b6000612b7984828501612a0b565b91505092915050565b600060208284031215612b9457600080fd5b6000612ba284828501612a1f565b91505092915050565b600060208284031215612bbd57600080fd5b6000612bcb84828501612a33565b91505092915050565b600060208284031215612be657600080fd5b600082013567ffffffffffffffff811115612c0057600080fd5b612c0c84828501612a47565b91505092915050565b600060208284031215612c2757600080fd5b600082015167ffffffffffffffff811115612c4157600080fd5b612c4d84828501612a9d565b91505092915050565b60008060408385031215612c6957600080fd5b600083013567ffffffffffffffff811115612c8357600080fd5b612c8f85828601612a47565b925050602083013567ffffffffffffffff811115612cac57600080fd5b612cb885828601612a47565b9150509250929050565b60008060408385031215612cd557600080fd5b600083015167ffffffffffffffff811115612cef57600080fd5b612cfb85828601612a9d565b925050602083015167ffffffffffffffff811115612d1857600080fd5b612d2485828601612a9d565b9150509250929050565b600080600060608486031215612d4357600080fd5b600084013567ffffffffffffffff811115612d5d57600080fd5b612d6986828701612a47565b935050602084013567ffffffffffffffff811115612d8657600080fd5b612d9286828701612a47565b925050604084013567ffffffffffffffff811115612daf57600080fd5b612dbb86828701612a47565b9150509250925092565b60008060008060808587031215612ddb57600080fd5b600085015167ffffffffffffffff811115612df557600080fd5b612e0187828801612a9d565b945050602085015167ffffffffffffffff811115612e1e57600080fd5b612e2a87828801612a9d565b935050604085015167ffffffffffffffff811115612e4757600080fd5b612e5387828801612a9d565b925050606085015167ffffffffffffffff811115612e7057600080fd5b612e7c87828801612a9d565b91505092959194509250565b60008060008060008060c08789031215612ea157600080fd5b600087015167ffffffffffffffff811115612ebb57600080fd5b612ec789828a01612a9d565b965050602087015167ffffffffffffffff811115612ee457600080fd5b612ef089828a01612a9d565b955050604087015167ffffffffffffffff811115612f0d57600080fd5b612f1989828a01612a9d565b945050606087015167ffffffffffffffff811115612f3657600080fd5b612f4289828a01612a9d565b935050608087015167ffffffffffffffff811115612f5f57600080fd5b612f6b89828a01612a9d565b92505060a087015167ffffffffffffffff811115612f8857600080fd5b612f9489828a01612a9d565b9150509295509295509295565b60008060408385031215612fb457600080fd5b600083013567ffffffffffffffff811115612fce57600080fd5b612fda85828601612a47565b9250506020612feb85828601612af3565b9150509250929050565b612ffe816134be565b82525050565b600061300f82613490565b8084526020840193508360208202850161302885613471565b60005b848110156130615783830388526130438383516130e4565b925061304e826134b1565b915060208801975060018101905061302b565b508196508694505050505092915050565b61307b8161354e565b82525050565b61308a81613560565b82525050565b613099816134de565b82525050565b6130a881613572565b82525050565b60006130b9826134a6565b8084526130cd816020860160208601613593565b6130d6816135c6565b602085010191505092915050565b60006130ef8261349b565b808452613103816020860160208601613593565b61310c816135c6565b602085010191505092915050565b600081546001811660008114613137576001811461315757613198565b607f600283041680865260ff198316602087015260408601935050613198565b6002820480865260208601955061316d8561347e565b60005b8281101561318f57815481890152600182019150602081019050613170565b80880195505050505b505092915050565b6131a9816134e8565b82525050565b60006040820190506131c46000830185612ff5565b81810360208301526131d681846130ae565b90509392505050565b60006060820190506131f46000830186612ff5565b818103602083015261320681856130ae565b905061321560408301846131a0565b949350505050565b600060608201905081810360008301526132378186613004565b9050818103602083015261324b8185613004565b9050818103604083015261325f8184613004565b9050949350505050565b600060208201905061327e6000830184613090565b92915050565b60006040820190506132996000830185613090565b81810360208301526132ab81846130ae565b90509392505050565b60006020820190506132c9600083018461309f565b92915050565b600060208201905081810360008301526132e981846130e4565b905092915050565b6000602082019050818103600083015261330b81846130ae565b905092915050565b6000604082019050818103600083015261332d81856130ae565b905061333c6020830184613072565b9392505050565b6000604082019050818103600083015261335d81856130ae565b905061336c6020830184613081565b9392505050565b6000604082019050818103600083015261338d81856130e4565b905081810360208301526133a181846130ae565b90509392505050565b600060208201905081810360008301526133c4818461311a565b905092915050565b600060608201905081810360008301526133e6818661311a565b905081810360208301526133fa81856130e4565b9050818103604083015261340e81846130e4565b9050949350505050565b6000604051905081810181811067ffffffffffffffff8211171561343b57600080fd5b8060405250919050565b600067ffffffffffffffff82111561345c57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b60008160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565b60006134fd826134be565b9050919050565b600061350f826134be565b9050919050565b6000613521826134be565b9050919050565b6000613533826134be565b9050919050565b6000819050919050565b6000819050919050565b6000613559826134be565b9050919050565b600061356b826134be565b9050919050565b600061357d826134de565b9050919050565b82818337600083830152505050565b60005b838110156135b1578082015181840152602081019050613596565b838111156135c0576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820f72a7f5412bb71a9b943eb0eac54c1f937f56bcf95a6d8c4794aaac6424bacf56c6578706572696d656e74616cf50037";

    public static final String ABI =
            "[{\"constant\":false,\"inputs\":[{\"name\":\"currentCredit\",\"type\":\"string\"},{\"name\":\"spentCredit\",\"type\":\"string\"},{\"name\":\"regulationInfo\",\"type\":\"string\"}],\"name\":\"insertRegulationInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"currentCredit\",\"type\":\"string\"}],\"name\":\"queryRegulationInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"functionName\",\"type\":\"string\"},{\"name\":\"criticalSize\",\"type\":\"uint256\"}],\"name\":\"registerParallelFunction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"uuid\",\"type\":\"string\"},{\"name\":\"transferRequest\",\"type\":\"string\"}],\"name\":\"transferredCredit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"currentCredit\",\"type\":\"string\"}],\"name\":\"queryCredit\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hiddenAssetTableName\",\"type\":\"string\"},{\"name\":\"_regulationInfoTableName\",\"type\":\"string\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"functionName\",\"type\":\"string\"}],\"name\":\"unregisterParallelFunction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"uuid1\",\"type\":\"string\"},{\"name\":\"uuid2\",\"type\":\"string\"},{\"name\":\"splitRequest\",\"type\":\"string\"}],\"name\":\"splitCredit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"uuid\",\"type\":\"string\"},{\"name\":\"issueArgument\",\"type\":\"string\"}],\"name\":\"issueCredit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableParallel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableParallel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"uuid\",\"type\":\"string\"},{\"name\":\"fulfillArgument\",\"type\":\"string\"}],\"name\":\"fulfillCredit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]";

    public static final String FUNC_INSERTREGULATIONINFO = "insertRegulationInfo";

    public static final String FUNC_QUERYREGULATIONINFO = "queryRegulationInfo";

    public static final String FUNC_REGISTERPARALLELFUNCTION = "registerParallelFunction";

    public static final String FUNC_TRANSFERREDCREDIT = "transferredCredit";

    public static final String FUNC_QUERYCREDIT = "queryCredit";

    public static final String FUNC_INIT = "init";

    public static final String FUNC_UNREGISTERPARALLELFUNCTION = "unregisterParallelFunction";

    public static final String FUNC_SPLITCREDIT = "splitCredit";

    public static final String FUNC_ISSUECREDIT = "issueCredit";

    public static final String FUNC_ENABLEPARALLEL = "enableParallel";

    public static final String FUNC_DISABLEPARALLEL = "disableParallel";

    public static final String FUNC_FULFILLCREDIT = "fulfillCredit";

    @Deprecated
    protected HiddenAssetExamplePerf(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected HiddenAssetExamplePerf(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected HiddenAssetExamplePerf(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected HiddenAssetExamplePerf(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> insertRegulationInfo(
            String currentCredit, String spentCredit, String regulationInfo) {
        final Function function =
                new Function(
                        FUNC_INSERTREGULATIONINFO,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(currentCredit),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(spentCredit),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(regulationInfo)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void insertRegulationInfo(
            String currentCredit,
            String spentCredit,
            String regulationInfo,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_INSERTREGULATIONINFO,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(currentCredit),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(spentCredit),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(regulationInfo)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String insertRegulationInfoSeq(
            String currentCredit, String spentCredit, String regulationInfo) {
        final Function function =
                new Function(
                        FUNC_INSERTREGULATIONINFO,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(currentCredit),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(spentCredit),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(regulationInfo)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<Tuple3<List<String>, List<String>, List<String>>> queryRegulationInfo(
            String currentCredit) {
        final Function function =
                new Function(
                        FUNC_QUERYREGULATIONINFO,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(currentCredit)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<Tuple3<List<String>, List<String>, List<String>>>(
                new Callable<Tuple3<List<String>, List<String>, List<String>>>() {
                    @Override
                    public Tuple3<List<String>, List<String>, List<String>> call()
                            throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<List<String>, List<String>, List<String>>(
                                convertToNative((List<Utf8String>) results.get(0).getValue()),
                                convertToNative((List<Utf8String>) results.get(1).getValue()),
                                convertToNative((List<Utf8String>) results.get(2).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> registerParallelFunction(
            String functionName, BigInteger criticalSize) {
        final Function function =
                new Function(
                        FUNC_REGISTERPARALLELFUNCTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(
                                        criticalSize)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void registerParallelFunction(
            String functionName, BigInteger criticalSize, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_REGISTERPARALLELFUNCTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(
                                        criticalSize)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String registerParallelFunctionSeq(String functionName, BigInteger criticalSize) {
        final Function function =
                new Function(
                        FUNC_REGISTERPARALLELFUNCTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(
                                        criticalSize)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> transferredCredit(String uuid, String transferRequest) {
        final Function function =
                new Function(
                        FUNC_TRANSFERREDCREDIT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(uuid),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(transferRequest)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void transferredCredit(
            String uuid, String transferRequest, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_TRANSFERREDCREDIT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(uuid),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(transferRequest)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String transferredCreditSeq(String uuid, String transferRequest) {
        final Function function =
                new Function(
                        FUNC_TRANSFERREDCREDIT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(uuid),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(transferRequest)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<Tuple2<BigInteger, String>> queryCredit(String currentCredit) {
        final Function function =
                new Function(
                        FUNC_QUERYCREDIT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(currentCredit)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Int256>() {},
                                new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple2<BigInteger, String>>(
                new Callable<Tuple2<BigInteger, String>>() {
                    @Override
                    public Tuple2<BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, String>(
                                (BigInteger) results.get(0).getValue(),
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> init(
            String _hiddenAssetTableName, String _regulationInfoTableName) {
        final Function function =
                new Function(
                        FUNC_INIT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        _hiddenAssetTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        _regulationInfoTableName)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void init(
            String _hiddenAssetTableName,
            String _regulationInfoTableName,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_INIT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        _hiddenAssetTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        _regulationInfoTableName)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String initSeq(String _hiddenAssetTableName, String _regulationInfoTableName) {
        final Function function =
                new Function(
                        FUNC_INIT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        _hiddenAssetTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        _regulationInfoTableName)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> unregisterParallelFunction(String functionName) {
        final Function function =
                new Function(
                        FUNC_UNREGISTERPARALLELFUNCTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void unregisterParallelFunction(String functionName, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_UNREGISTERPARALLELFUNCTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String unregisterParallelFunctionSeq(String functionName) {
        final Function function =
                new Function(
                        FUNC_UNREGISTERPARALLELFUNCTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> splitCredit(
            String uuid1, String uuid2, String splitRequest) {
        final Function function =
                new Function(
                        FUNC_SPLITCREDIT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(uuid1),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(uuid2),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(splitRequest)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void splitCredit(
            String uuid1, String uuid2, String splitRequest, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_SPLITCREDIT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(uuid1),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(uuid2),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(splitRequest)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String splitCreditSeq(String uuid1, String uuid2, String splitRequest) {
        final Function function =
                new Function(
                        FUNC_SPLITCREDIT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(uuid1),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(uuid2),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(splitRequest)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> issueCredit(String uuid, String issueArgument) {
        final Function function =
                new Function(
                        FUNC_ISSUECREDIT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(uuid),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(issueArgument)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void issueCredit(String uuid, String issueArgument, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_ISSUECREDIT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(uuid),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(issueArgument)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String issueCreditSeq(String uuid, String issueArgument) {
        final Function function =
                new Function(
                        FUNC_ISSUECREDIT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(uuid),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(issueArgument)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> enableParallel() {
        final Function function =
                new Function(
                        FUNC_ENABLEPARALLEL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void enableParallel(TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_ENABLEPARALLEL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String enableParallelSeq() {
        final Function function =
                new Function(
                        FUNC_ENABLEPARALLEL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> disableParallel() {
        final Function function =
                new Function(
                        FUNC_DISABLEPARALLEL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void disableParallel(TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_DISABLEPARALLEL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String disableParallelSeq() {
        final Function function =
                new Function(
                        FUNC_DISABLEPARALLEL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> fulfillCredit(String uuid, String fulfillArgument) {
        final Function function =
                new Function(
                        FUNC_FULFILLCREDIT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(uuid),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(fulfillArgument)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void fulfillCredit(
            String uuid, String fulfillArgument, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_FULFILLCREDIT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(uuid),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(fulfillArgument)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String fulfillCreditSeq(String uuid, String fulfillArgument) {
        final Function function =
                new Function(
                        FUNC_FULFILLCREDIT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(uuid),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(fulfillArgument)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    @Deprecated
    public static HiddenAssetExamplePerf load(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        return new HiddenAssetExamplePerf(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static HiddenAssetExamplePerf load(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        return new HiddenAssetExamplePerf(
                contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static HiddenAssetExamplePerf load(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new HiddenAssetExamplePerf(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static HiddenAssetExamplePerf load(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        return new HiddenAssetExamplePerf(
                contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<HiddenAssetExamplePerf> deploy(
            Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(
                HiddenAssetExamplePerf.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<HiddenAssetExamplePerf> deploy(
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(
                HiddenAssetExamplePerf.class,
                web3j,
                transactionManager,
                contractGasProvider,
                BINARY,
                "");
    }

    @Deprecated
    public static RemoteCall<HiddenAssetExamplePerf> deploy(
            Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(
                HiddenAssetExamplePerf.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<HiddenAssetExamplePerf> deploy(
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        return deployRemoteCall(
                HiddenAssetExamplePerf.class,
                web3j,
                transactionManager,
                gasPrice,
                gasLimit,
                BINARY,
                "");
    }
}
