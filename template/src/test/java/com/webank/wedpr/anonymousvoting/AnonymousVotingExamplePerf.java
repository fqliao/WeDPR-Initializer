package com.webank.wedpr.anonymousvoting;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.DynamicArray;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint8;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;

/**
 * Auto generated code.
 *
 * <p><strong>Do not modify!</strong>
 *
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the <a
 * href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class AnonymousVotingExamplePerf extends Contract {
    public static String BINARY =
            "";

    public static final String ABI =
            "[{\"constant\":true,\"inputs\":[],\"name\":\"getVoteResultStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCandidates\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"counterId\",\"type\":\"string\"}],\"name\":\"queryHPointShare\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidates\",\"type\":\"string[]\"}],\"name\":\"setCandidates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"blankBallot\",\"type\":\"string\"}],\"name\":\"queryRegulationInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"uuid\",\"type\":\"string\"},{\"name\":\"voteStorage\",\"type\":\"string\"},{\"name\":\"hPointShare\",\"type\":\"string\"},{\"name\":\"decryptedRequest\",\"type\":\"string\"},{\"name\":\"systemParameters\",\"type\":\"string\"}],\"name\":\"verifyCountRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"functionName\",\"type\":\"string\"},{\"name\":\"criticalSize\",\"type\":\"uint256\"}],\"name\":\"registerParallelFunction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"blankBallot\",\"type\":\"string\"}],\"name\":\"queryVoteStoragePart\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"uuid\",\"type\":\"string\"},{\"name\":\"voteRequest\",\"type\":\"string\"},{\"name\":\"systemParameters\",\"type\":\"string\"}],\"name\":\"verifyBoundedVoteRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"systemParameters\",\"type\":\"string\"}],\"name\":\"aggregateDecryptedPart\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"uuid\",\"type\":\"string\"},{\"name\":\"voteResultRequest\",\"type\":\"string\"},{\"name\":\"systemParameters\",\"type\":\"string\"}],\"name\":\"verifyVoteResult\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"functionName\",\"type\":\"string\"}],\"name\":\"unregisterParallelFunction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"counterId\",\"type\":\"string\"},{\"name\":\"hPointShare\",\"type\":\"string\"}],\"name\":\"insertHPointShare\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVoteStorageSum\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_voterTableName\",\"type\":\"string\"},{\"name\":\"_counterTableName\",\"type\":\"string\"},{\"name\":\"_regulationInfoTableName\",\"type\":\"string\"},{\"name\":\"_voterAggregateTableName\",\"type\":\"string\"},{\"name\":\"_counterAggregateTableName\",\"type\":\"string\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"uuid\",\"type\":\"string\"},{\"name\":\"voteRequest\",\"type\":\"string\"},{\"name\":\"systemParameters\",\"type\":\"string\"}],\"name\":\"verifyUnboundedVoteRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableParallel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"systemParameters\",\"type\":\"string\"}],\"name\":\"aggregateVoteStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"blankBallot\",\"type\":\"string\"},{\"name\":\"regulationInfoPb\",\"type\":\"string\"}],\"name\":\"insertRegulationInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHPoint\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDecryptedResultPartStorageSum\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableParallel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"nextContractState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]";

    public static final String FUNC_GETVOTERESULTSTORAGE = "getVoteResultStorage";

    public static final String FUNC_GETCANDIDATES = "getCandidates";

    public static final String FUNC_QUERYHPOINTSHARE = "queryHPointShare";

    public static final String FUNC_SETCANDIDATES = "setCandidates";

    public static final String FUNC_QUERYREGULATIONINFO = "queryRegulationInfo";

    public static final String FUNC_VERIFYCOUNTREQUEST = "verifyCountRequest";

    public static final String FUNC_REGISTERPARALLELFUNCTION = "registerParallelFunction";

    public static final String FUNC_QUERYVOTESTORAGEPART = "queryVoteStoragePart";

    public static final String FUNC_VERIFYBOUNDEDVOTEREQUEST = "verifyBoundedVoteRequest";

    public static final String FUNC_AGGREGATEDECRYPTEDPART = "aggregateDecryptedPart";

    public static final String FUNC_VERIFYVOTERESULT = "verifyVoteResult";

    public static final String FUNC_UNREGISTERPARALLELFUNCTION = "unregisterParallelFunction";

    public static final String FUNC_INSERTHPOINTSHARE = "insertHPointShare";

    public static final String FUNC_GETVOTESTORAGESUM = "getVoteStorageSum";

    public static final String FUNC_CONTRACTSTATE = "contractState";

    public static final String FUNC_INIT = "init";

    public static final String FUNC_VERIFYUNBOUNDEDVOTEREQUEST = "verifyUnboundedVoteRequest";

    public static final String FUNC_ENABLEPARALLEL = "enableParallel";

    public static final String FUNC_AGGREGATEVOTESTORAGE = "aggregateVoteStorage";

    public static final String FUNC_INSERTREGULATIONINFO = "insertRegulationInfo";

    public static final String FUNC_GETHPOINT = "getHPoint";

    public static final String FUNC_GETDECRYPTEDRESULTPARTSTORAGESUM =
            "getDecryptedResultPartStorageSum";

    public static final String FUNC_DISABLEPARALLEL = "disableParallel";

    public static final String FUNC_NEXTCONTRACTSTATE = "nextContractState";

    @Deprecated
    protected AnonymousVotingExamplePerf(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected AnonymousVotingExamplePerf(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected AnonymousVotingExamplePerf(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected AnonymousVotingExamplePerf(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<String> getVoteResultStorage() {
        final Function function =
                new Function(
                        FUNC_GETVOTERESULTSTORAGE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<List> getCandidates() {
        final Function function =
                new Function(
                        FUNC_GETCANDIDATES,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result =
                                (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<List> queryHPointShare(String counterId) {
        final Function function =
                new Function(
                        FUNC_QUERYHPOINTSHARE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(counterId)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result =
                                (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setCandidates(List<String> candidates) {
        final Function function =
                new Function(
                        FUNC_SETCANDIDATES,
                        Arrays.<Type>asList(
                                candidates.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        candidates,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setCandidates(List<String> candidates, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETCANDIDATES,
                        Arrays.<Type>asList(
                                candidates.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        candidates,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setCandidatesSeq(List<String> candidates) {
        final Function function =
                new Function(
                        FUNC_SETCANDIDATES,
                        Arrays.<Type>asList(
                                candidates.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        candidates,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<List> queryRegulationInfo(String blankBallot) {
        final Function function =
                new Function(
                        FUNC_QUERYREGULATIONINFO,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(blankBallot)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result =
                                (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> verifyCountRequest(
            String uuid,
            String voteStorage,
            String hPointShare,
            String decryptedRequest,
            String systemParameters) {
        final Function function =
                new Function(
                        FUNC_VERIFYCOUNTREQUEST,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(uuid),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voteStorage),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(hPointShare),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(decryptedRequest),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        systemParameters)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void verifyCountRequest(
            String uuid,
            String voteStorage,
            String hPointShare,
            String decryptedRequest,
            String systemParameters,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_VERIFYCOUNTREQUEST,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(uuid),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voteStorage),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(hPointShare),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(decryptedRequest),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        systemParameters)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String verifyCountRequestSeq(
            String uuid,
            String voteStorage,
            String hPointShare,
            String decryptedRequest,
            String systemParameters) {
        final Function function =
                new Function(
                        FUNC_VERIFYCOUNTREQUEST,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(uuid),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voteStorage),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(hPointShare),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(decryptedRequest),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        systemParameters)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> registerParallelFunction(
            String functionName, BigInteger criticalSize) {
        final Function function =
                new Function(
                        FUNC_REGISTERPARALLELFUNCTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(
                                        criticalSize)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void registerParallelFunction(
            String functionName, BigInteger criticalSize, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_REGISTERPARALLELFUNCTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(
                                        criticalSize)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String registerParallelFunctionSeq(String functionName, BigInteger criticalSize) {
        final Function function =
                new Function(
                        FUNC_REGISTERPARALLELFUNCTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName),
                                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(
                                        criticalSize)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<List> queryVoteStoragePart(String blankBallot) {
        final Function function =
                new Function(
                        FUNC_QUERYVOTESTORAGEPART,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(blankBallot)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result =
                                (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> verifyBoundedVoteRequest(
            String uuid, String voteRequest, String systemParameters) {
        final Function function =
                new Function(
                        FUNC_VERIFYBOUNDEDVOTEREQUEST,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(uuid),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voteRequest),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        systemParameters)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void verifyBoundedVoteRequest(
            String uuid,
            String voteRequest,
            String systemParameters,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_VERIFYBOUNDEDVOTEREQUEST,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(uuid),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voteRequest),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        systemParameters)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String verifyBoundedVoteRequestSeq(
            String uuid, String voteRequest, String systemParameters) {
        final Function function =
                new Function(
                        FUNC_VERIFYBOUNDEDVOTEREQUEST,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(uuid),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voteRequest),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        systemParameters)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> aggregateDecryptedPart(String systemParameters) {
        final Function function =
                new Function(
                        FUNC_AGGREGATEDECRYPTEDPART,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        systemParameters)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void aggregateDecryptedPart(String systemParameters, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_AGGREGATEDECRYPTEDPART,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        systemParameters)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String aggregateDecryptedPartSeq(String systemParameters) {
        final Function function =
                new Function(
                        FUNC_AGGREGATEDECRYPTEDPART,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        systemParameters)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> verifyVoteResult(
            String uuid, String voteResultRequest, String systemParameters) {
        final Function function =
                new Function(
                        FUNC_VERIFYVOTERESULT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(uuid),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        voteResultRequest),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        systemParameters)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void verifyVoteResult(
            String uuid,
            String voteResultRequest,
            String systemParameters,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_VERIFYVOTERESULT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(uuid),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        voteResultRequest),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        systemParameters)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String verifyVoteResultSeq(
            String uuid, String voteResultRequest, String systemParameters) {
        final Function function =
                new Function(
                        FUNC_VERIFYVOTERESULT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(uuid),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        voteResultRequest),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        systemParameters)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> unregisterParallelFunction(String functionName) {
        final Function function =
                new Function(
                        FUNC_UNREGISTERPARALLELFUNCTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void unregisterParallelFunction(String functionName, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_UNREGISTERPARALLELFUNCTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String unregisterParallelFunctionSeq(String functionName) {
        final Function function =
                new Function(
                        FUNC_UNREGISTERPARALLELFUNCTION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(functionName)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> insertHPointShare(String counterId, String hPointShare) {
        final Function function =
                new Function(
                        FUNC_INSERTHPOINTSHARE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(counterId),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(hPointShare)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void insertHPointShare(
            String counterId, String hPointShare, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_INSERTHPOINTSHARE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(counterId),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(hPointShare)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String insertHPointShareSeq(String counterId, String hPointShare) {
        final Function function =
                new Function(
                        FUNC_INSERTHPOINTSHARE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(counterId),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(hPointShare)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<String> getVoteStorageSum() {
        final Function function =
                new Function(
                        FUNC_GETVOTESTORAGESUM,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> contractState() {
        final Function function =
                new Function(
                        FUNC_CONTRACTSTATE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> init(
            String _voterTableName,
            String _counterTableName,
            String _regulationInfoTableName,
            String _voterAggregateTableName,
            String _counterAggregateTableName) {
        final Function function =
                new Function(
                        FUNC_INIT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_voterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        _counterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        _regulationInfoTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        _voterAggregateTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        _counterAggregateTableName)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void init(
            String _voterTableName,
            String _counterTableName,
            String _regulationInfoTableName,
            String _voterAggregateTableName,
            String _counterAggregateTableName,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_INIT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_voterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        _counterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        _regulationInfoTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        _voterAggregateTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        _counterAggregateTableName)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String initSeq(
            String _voterTableName,
            String _counterTableName,
            String _regulationInfoTableName,
            String _voterAggregateTableName,
            String _counterAggregateTableName) {
        final Function function =
                new Function(
                        FUNC_INIT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_voterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        _counterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        _regulationInfoTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        _voterAggregateTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        _counterAggregateTableName)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> verifyUnboundedVoteRequest(
            String uuid, String voteRequest, String systemParameters) {
        final Function function =
                new Function(
                        FUNC_VERIFYUNBOUNDEDVOTEREQUEST,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(uuid),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voteRequest),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        systemParameters)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void verifyUnboundedVoteRequest(
            String uuid,
            String voteRequest,
            String systemParameters,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_VERIFYUNBOUNDEDVOTEREQUEST,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(uuid),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voteRequest),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        systemParameters)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String verifyUnboundedVoteRequestSeq(
            String uuid, String voteRequest, String systemParameters) {
        final Function function =
                new Function(
                        FUNC_VERIFYUNBOUNDEDVOTEREQUEST,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(uuid),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voteRequest),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        systemParameters)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> enableParallel() {
        final Function function =
                new Function(
                        FUNC_ENABLEPARALLEL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void enableParallel(TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_ENABLEPARALLEL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String enableParallelSeq() {
        final Function function =
                new Function(
                        FUNC_ENABLEPARALLEL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> aggregateVoteStorage(String systemParameters) {
        final Function function =
                new Function(
                        FUNC_AGGREGATEVOTESTORAGE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        systemParameters)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void aggregateVoteStorage(String systemParameters, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_AGGREGATEVOTESTORAGE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        systemParameters)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String aggregateVoteStorageSeq(String systemParameters) {
        final Function function =
                new Function(
                        FUNC_AGGREGATEVOTESTORAGE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        systemParameters)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> insertRegulationInfo(
            String blankBallot, String regulationInfoPb) {
        final Function function =
                new Function(
                        FUNC_INSERTREGULATIONINFO,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(blankBallot),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        regulationInfoPb)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void insertRegulationInfo(
            String blankBallot, String regulationInfoPb, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_INSERTREGULATIONINFO,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(blankBallot),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        regulationInfoPb)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String insertRegulationInfoSeq(String blankBallot, String regulationInfoPb) {
        final Function function =
                new Function(
                        FUNC_INSERTREGULATIONINFO,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(blankBallot),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        regulationInfoPb)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<String> getHPoint() {
        final Function function =
                new Function(
                        FUNC_GETHPOINT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getDecryptedResultPartStorageSum() {
        final Function function =
                new Function(
                        FUNC_GETDECRYPTEDRESULTPARTSTORAGESUM,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> disableParallel() {
        final Function function =
                new Function(
                        FUNC_DISABLEPARALLEL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void disableParallel(TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_DISABLEPARALLEL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String disableParallelSeq() {
        final Function function =
                new Function(
                        FUNC_DISABLEPARALLEL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> nextContractState() {
        final Function function =
                new Function(
                        FUNC_NEXTCONTRACTSTATE,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void nextContractState(TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_NEXTCONTRACTSTATE,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String nextContractStateSeq() {
        final Function function =
                new Function(
                        FUNC_NEXTCONTRACTSTATE,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    @Deprecated
    public static AnonymousVotingExamplePerf load(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        return new AnonymousVotingExamplePerf(
                contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static AnonymousVotingExamplePerf load(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        return new AnonymousVotingExamplePerf(
                contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static AnonymousVotingExamplePerf load(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new AnonymousVotingExamplePerf(
                contractAddress, web3j, credentials, contractGasProvider);
    }

    public static AnonymousVotingExamplePerf load(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        return new AnonymousVotingExamplePerf(
                contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<AnonymousVotingExamplePerf> deploy(
            Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(
                AnonymousVotingExamplePerf.class,
                web3j,
                credentials,
                contractGasProvider,
                BINARY,
                "");
    }

    public static RemoteCall<AnonymousVotingExamplePerf> deploy(
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(
                AnonymousVotingExamplePerf.class,
                web3j,
                transactionManager,
                contractGasProvider,
                BINARY,
                "");
    }

    @Deprecated
    public static RemoteCall<AnonymousVotingExamplePerf> deploy(
            Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(
                AnonymousVotingExamplePerf.class,
                web3j,
                credentials,
                gasPrice,
                gasLimit,
                BINARY,
                "");
    }

    @Deprecated
    public static RemoteCall<AnonymousVotingExamplePerf> deploy(
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        return deployRemoteCall(
                AnonymousVotingExamplePerf.class,
                web3j,
                transactionManager,
                gasPrice,
                gasLimit,
                BINARY,
                "");
    }
}
