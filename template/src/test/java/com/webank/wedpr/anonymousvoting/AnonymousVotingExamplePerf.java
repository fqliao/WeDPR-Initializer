package com.webank.wedpr.anonymousvoting;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.DynamicArray;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint8;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;

/**
 * Auto generated code.
 *
 * <p><strong>Do not modify!</strong>
 *
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the <a
 * href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class AnonymousVotingExamplePerf extends Contract {
    public static String BINARY =
            "608060405234801561001057600080fd5b5033600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600360006101000a81548160ff0219169083600481111561007157fe5b02179055506150186000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506142bc80620000c86000396000f3006080604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301e7b9c9146100eb57806306a49fce146101165780630adae0ba1461014157806314e745d91461017e5780631d2c1682146101a75780632df90a70146101d257806346176b71146101fb5780636065c277146102385780637029144c1461026157806379e4873d1461029f57806385209ee0146102dc5780638db0356d14610307578063a3b7628b14610332578063c80a88651461036f578063cbb7babf146103ac578063e5a1c712146103d7575b600080fd5b3480156100f757600080fd5b506101006103ee565b60405161010d9190613cef565b60405180910390f35b34801561012257600080fd5b5061012b6104f9565b6040516101389190613c4c565b60405180910390f35b34801561014d57600080fd5b50610168600480360361016391908101906134dd565b610650565b6040516101759190613c4c565b60405180910390f35b34801561018a57600080fd5b506101a560048036036101a0919081019061338e565b610b89565b005b3480156101b357600080fd5b506101bc610c10565b6040516101c99190613cef565b60405180910390f35b3480156101de57600080fd5b506101f960048036036101f4919081019061373a565b610d1c565b005b34801561020757600080fd5b50610222600480360361021d9190810190613549565b61101d565b60405161022f9190613cef565b60405180910390f35b34801561024457600080fd5b5061025f600480360361025a9190810190613677565b61132f565b005b34801561026d57600080fd5b50610288600480360361028391908101906134dd565b6115d9565b604051610296929190613ca4565b60405180910390f35b3480156102ab57600080fd5b506102c660048036036102c19190810190613549565b6118b4565b6040516102d39190613c89565b60405180910390f35b3480156102e857600080fd5b506102f1611df1565b6040516102fe9190613c6e565b60405180910390f35b34801561031357600080fd5b5061031c611e04565b6040516103299190613cef565b60405180910390f35b34801561033e57600080fd5b5061035960048036036103549190810190613549565b611f10565b6040516103669190613cef565b60405180910390f35b34801561037b57600080fd5b50610396600480360361039191908101906134dd565b612222565b6040516103a39190613c4c565b60405180910390f35b3480156103b857600080fd5b506103c161275b565b6040516103ce9190613cef565b60405180910390f35b3480156103e357600080fd5b506103ec61286a565b005b60606004808111156103fc57fe5b600360009054906101000a900460ff16600481111561041757fe5b141515610459576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045090613f6d565b60405180910390fd5b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104ef5780601f106104c4576101008083540402835291602001916104ef565b820191906000526020600020905b8154815290600101906020018083116104d257829003601f168201915b5050505050905090565b60606000600481111561050857fe5b600360009054906101000a900460ff16600481111561052357fe5b14151515610566576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055d90613f4d565b60405180910390fd5b6001600001805480602002602001604051908101604052809291908181526020016000905b82821015610647578382906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106335780601f1061060857610100808354040283529160200191610633565b820191906000526020600020905b81548152906001019060200180831161061657829003601f168201915b50505050508152602001906001019061058b565b50505050905090565b60606000806000606060008061100195508573ffffffffffffffffffffffffffffffffffffffff1663f23f63c98a6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016106b69190613cef565b602060405180830381600087803b1580156106d057600080fd5b505af11580156106e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610708919081019061344a565b94508473ffffffffffffffffffffffffffffffffffffffff1663e8434e39898773ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561078b57600080fd5b505af115801561079f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107c391908101906133cf565b6040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016107fc929190613d11565b602060405180830381600087803b15801561081657600080fd5b505af115801561082a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061084e91908101906133f8565b93508373ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156108b457600080fd5b505af11580156108c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506108ec9190810190613473565b60405190808252806020026020018201604052801561091f57816020015b606081526020019060019003908161090a5790505b509250600091505b8373ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561098b57600080fd5b505af115801561099f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506109c39190810190613473565b821215610b7a578373ffffffffffffffffffffffffffffffffffffffff1663846719e0836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610a1f9190613c89565b602060405180830381600087803b158015610a3957600080fd5b505af1158015610a4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a719190810190613421565b90508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040805190810160405280600b81526020017f766f746553746f726167650000000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610afd9190613ccd565b600060405180830381600087803b158015610b1757600080fd5b505af1158015610b2b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610b54919081019061349c565b8383815181101515610b6257fe5b90602001906020020181905250816001019150610927565b82965050505050505092915050565b60006004811115610b9657fe5b600360009054906101000a900460ff166004811115610bb157fe5b141515610bf3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bea90613fed565b60405180910390fd5b8060016000019080519060200190610c0c929190612fb9565b5050565b606060016004811115610c1f57fe5b600360009054906101000a900460ff166004811115610c3a57fe5b111515610c7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c739061400d565b60405180910390fd5b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d125780601f10610ce757610100808354040283529160200191610d12565b820191906000526020600020905b815481529060010190602001808311610cf557829003601f168201915b5050505050905090565b600060608060008060026004811115610d3157fe5b600360009054906101000a900460ff166004811115610d4c57fe5b141515610d8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d859061402d565b60405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634da869e68a8a8a8a6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610e0a9493929190613de6565b602060405180830381600087803b158015610e2457600080fd5b505af1158015610e38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e5c9190810190613473565b9450600085146040805190810160405280601e81526020017f566572696669657320636f756e742072657175657374206661696c65642e0000815250901515610edb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed29190613ccd565b60405180910390fd5b5060206040519081016040528060008152509350602060405190810160405280600081525092506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e003067d8a8860056040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610f7d93929190613e47565b600060405180830381600087803b158015610f9757600080fd5b505af1158015610fab573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610fd491908101906135e0565b60056000829190509080519060200190610fef929190613019565b508195508296505050506110028a612a3b565b915061100f828585612af8565b905050505050505050505050565b606060006060806000606060006001600481111561103757fe5b600360009054906101000a900460ff16600481111561105257fe5b141515611094576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108b9061404d565b60405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a7589f48a8a6040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161110c929190613daf565b602060405180830381600087803b15801561112657600080fd5b505af115801561113a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061115e9190810190613473565b9550600086146040805190810160405280601d81526020017f566572696669657320766f74652072657175657374206661696c65642e0000008152509015156111dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d49190613ccd565b60405180910390fd5b5060206040519081016040528060008152509450602060405190810160405280600081525093506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635fa526b98a8a60046040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161127f93929190613e47565b600060405180830381600087803b15801561129957600080fd5b505af11580156112ad573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506112d691908101906135e0565b600460008291905090805190602001906112f1929190613019565b508196508297505050506113048a612a3b565b92506113108a86610650565b915061131d838686612da7565b90508496505050505050509392505050565b600060606003600481111561134057fe5b600360009054906101000a900460ff16600481111561135b57fe5b14151561139d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139490613f8d565b60405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633a112a0a878787876040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114199493929190613de6565b602060405180830381600087803b15801561143357600080fd5b505af1158015611447573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061146b9190810190613473565b9150600082146040805190810160405280601c81526020017f566572696669657320766f746520726573756c74206661696c65642e000000008152509015156114ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e19190613ccd565b60405180910390fd5b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663255d406a846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016115619190613cef565b600060405180830381600087803b15801561157b57600080fd5b505af115801561158f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506115b8919081019061349c565b905080600690805190602001906115d0929190613019565b50505050505050565b60008060008060008060048111156115ed57fe5b600360009054906101000a900460ff16600481111561160857fe5b14151561164a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164190613fed565b60405180910390fd5b61100192508273ffffffffffffffffffffffffffffffffffffffff166356004b6a886040805190810160405280600b81526020017f626c616e6b42616c6c6f740000000000000000000000000000000000000000008152506040805190810160405280600b81526020017f766f746553746f726167650000000000000000000000000000000000000000008152506040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161171293929190613e93565b602060405180830381600087803b15801561172c57600080fd5b505af1158015611740573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506117649190810190613473565b91508273ffffffffffffffffffffffffffffffffffffffff166356004b6a876040805190810160405280600981526020017f636f756e74657249640000000000000000000000000000000000000000000000815250606060405190810160405280602781526020017f68506f696e7453686172652c20646563727970746564526573756c745061727481526020017f53746f72616765000000000000000000000000000000000000000000000000008152506040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161185093929190613e93565b602060405180830381600087803b15801561186a57600080fd5b505af115801561187e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118a29190810190613473565b90508181945094505050509250929050565b600080600080606060006060600060048111156118cd57fe5b600360009054906101000a900460ff1660048111156118e857fe5b14151561192a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192190613fed565b60405180910390fd5b61100195508573ffffffffffffffffffffffffffffffffffffffff1663f23f63c98b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016119849190613cef565b602060405180830381600087803b15801561199e57600080fd5b505af11580156119b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506119d6919081019061344a565b94508473ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611a3c57600080fd5b505af1158015611a50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611a749190810190613421565b93508373ffffffffffffffffffffffffffffffffffffffff1663e942b5166040805190810160405280600b81526020017f68506f696e7453686172650000000000000000000000000000000000000000008152508a6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611b02929190613f16565b600060405180830381600087803b158015611b1c57600080fd5b505af1158015611b30573d6000803e3d6000fd5b50505050611b3e8a8a612222565b925060008351146040805190810160405280601a81526020017f436f756e7465727320697320616c72656164792065786973742e000000000000815250901515611bbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bb59190613ccd565b60405180910390fd5b508473ffffffffffffffffffffffffffffffffffffffff166331afac368a866040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611c16929190613d41565b602060405180830381600087803b158015611c3057600080fd5b505af1158015611c44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611c689190810190613473565b9150600182146040805190810160405280601e81526020017f4e6f207065726d697373696f6e206f72206f74686572206572726f72732e0000815250901515611ce7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cde9190613ccd565b60405180910390fd5b506001600754016007819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630d4ade7789600180016040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611d6f929190613edf565b600060405180830381600087803b158015611d8957600080fd5b505af1158015611d9d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250611dc6919081019061349c565b905080600180019080519060200190611de0929190613019565b508196505050505050509392505050565b600360009054906101000a900460ff1681565b606060026004811115611e1357fe5b600360009054906101000a900460ff166004811115611e2e57fe5b111515611e70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6790613fad565b60405180910390fd5b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611f065780601f10611edb57610100808354040283529160200191611f06565b820191906000526020600020905b815481529060010190602001808311611ee957829003601f168201915b5050505050905090565b6060600060608060006060600060016004811115611f2a57fe5b600360009054906101000a900460ff166004811115611f4557fe5b141515611f87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f7e9061404d565b60405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663790a4c4a8a8a6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611fff929190613daf565b602060405180830381600087803b15801561201957600080fd5b505af115801561202d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506120519190810190613473565b9550600086146040805190810160405280601d81526020017f566572696669657320766f74652072657175657374206661696c65642e0000008152509015156120d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c79190613ccd565b60405180910390fd5b5060206040519081016040528060008152509450602060405190810160405280600081525093506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635fa526b98a8a60046040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161217293929190613e47565b600060405180830381600087803b15801561218c57600080fd5b505af11580156121a0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506121c991908101906135e0565b600460008291905090805190602001906121e4929190613019565b508196508297505050506121f78a612a3b565b92506122038a86610650565b9150612210838686612da7565b90508496505050505050509392505050565b60606000806000606060008061100195508573ffffffffffffffffffffffffffffffffffffffff1663f23f63c98a6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016122889190613cef565b602060405180830381600087803b1580156122a257600080fd5b505af11580156122b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506122da919081019061344a565b94508473ffffffffffffffffffffffffffffffffffffffff1663e8434e39898773ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561235d57600080fd5b505af1158015612371573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061239591908101906133cf565b6040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016123ce929190613d11565b602060405180830381600087803b1580156123e857600080fd5b505af11580156123fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061242091908101906133f8565b93508373ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561248657600080fd5b505af115801561249a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506124be9190810190613473565b6040519080825280602002602001820160405280156124f157816020015b60608152602001906001900390816124dc5790505b509250600091505b8373ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561255d57600080fd5b505af1158015612571573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506125959190810190613473565b82121561274c578373ffffffffffffffffffffffffffffffffffffffff1663846719e0836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016125f19190613c89565b602060405180830381600087803b15801561260b57600080fd5b505af115801561261f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506126439190810190613421565b90508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040805190810160405280600b81526020017f68506f696e7453686172650000000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016126cf9190613ccd565b600060405180830381600087803b1580156126e957600080fd5b505af11580156126fd573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250612726919081019061349c565b838381518110151561273457fe5b906020019060200201819052508160010191506124f9565b82965050505050505092915050565b60606000600481111561276a57fe5b600360009054906101000a900460ff16600481111561278557fe5b141515156127c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127bf90613f4d565b60405180910390fd5b600180018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156128605780601f1061283557610100808354040283529160200191612860565b820191906000526020600020905b81548152906001019060200180831161284357829003601f168201915b5050505050905090565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156128c657600080fd5b600060048111156128d357fe5b600360009054906101000a900460ff1660048111156128ee57fe5b14156129655760026007541015151561293c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161293390613fcd565b60405180910390fd5b6001600360006101000a81548160ff0219169083600481111561295b57fe5b0217905550612a39565b6001600481111561297257fe5b600360009054906101000a900460ff16600481111561298d57fe5b14156129bc576002600360006101000a81548160ff021916908360048111156129b257fe5b0217905550612a38565b600260048111156129c957fe5b600360009054906101000a900460ff1660048111156129e457fe5b1415612a125760038060006101000a81548160ff02191690836004811115612a0857fe5b0217905550612a37565b6004600360006101000a81548160ff02191690836004811115612a3157fe5b02179055505b5b5b565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff1663f23f63c9856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612a9a9190613cef565b602060405180830381600087803b158015612ab457600080fd5b505af1158015612ac8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612aec919081019061344a565b90508092505050919050565b6000808473ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015612b5f57600080fd5b505af1158015612b73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612b979190810190613421565b90508073ffffffffffffffffffffffffffffffffffffffff1663e942b5166040805190810160405280601a81526020017f646563727970746564526573756c745061727453746f72616765000000000000815250856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612c25929190613f16565b600060405180830381600087803b158015612c3f57600080fd5b505af1158015612c53573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff1663bf2b70a185838873ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015612cd957600080fd5b505af1158015612ced573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612d1191908101906133cf565b6040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612d4b93929190613d71565b602060405180830381600087803b158015612d6557600080fd5b505af1158015612d79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612d9d9190810190613473565b9150509392505050565b6000808473ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015612e0e57600080fd5b505af1158015612e22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612e469190810190613421565b90508073ffffffffffffffffffffffffffffffffffffffff1663e942b5166040805190810160405280600b81526020017f766f746553746f72616765000000000000000000000000000000000000000000815250856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612ed4929190613f16565b600060405180830381600087803b158015612eee57600080fd5b505af1158015612f02573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff166331afac3685836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612f5d929190613d41565b602060405180830381600087803b158015612f7757600080fd5b505af1158015612f8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612faf9190810190613473565b9150509392505050565b828054828255906000526020600020908101928215613008579160200282015b82811115613007578251829080519060200190612ff7929190613099565b5091602001919060010190612fd9565b5b5090506130159190613119565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061305a57805160ff1916838001178555613088565b82800160010185558215613088579182015b8281111561308757825182559160200191906001019061306c565b5b5090506130959190613145565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106130da57805160ff1916838001178555613108565b82800160010185558215613108579182015b828111156131075782518255916020019190600101906130ec565b5b5090506131159190613145565b5090565b61314291905b8082111561313e5760008181613135919061316a565b5060010161311f565b5090565b90565b61316791905b8082111561316357600081600090555060010161314b565b5090565b90565b50805460018160011615610100020316600290046000825580601f1061319057506131af565b601f0160209004906000526020600020908101906131ae9190613145565b5b50565b600082601f83011215156131c557600080fd5b81356131d86131d38261409a565b61406d565b9150818183526020840193506020810190508360005b8381101561321e5781358601613204888261328c565b8452602084019350602083019250506001810190506131ee565b5050505092915050565b600061323482516141a7565b905092915050565b600061324882516141b9565b905092915050565b600061325c82516141cb565b905092915050565b600061327082516141dd565b905092915050565b600061328482516141ef565b905092915050565b600082601f830112151561329f57600080fd5b81356132b26132ad826140c2565b61406d565b915080825260208301602083018583830111156132ce57600080fd5b6132d983828461422f565b50505092915050565b600082601f83011215156132f557600080fd5b8135613308613303826140ee565b61406d565b9150808252602083016020830185838301111561332457600080fd5b61332f83828461422f565b50505092915050565b600082601f830112151561334b57600080fd5b815161335e613359826140ee565b61406d565b9150808252602083016020830185838301111561337a57600080fd5b61338583828461423e565b50505092915050565b6000602082840312156133a057600080fd5b600082013567ffffffffffffffff8111156133ba57600080fd5b6133c6848285016131b2565b91505092915050565b6000602082840312156133e157600080fd5b60006133ef84828501613228565b91505092915050565b60006020828403121561340a57600080fd5b60006134188482850161323c565b91505092915050565b60006020828403121561343357600080fd5b600061344184828501613250565b91505092915050565b60006020828403121561345c57600080fd5b600061346a84828501613264565b91505092915050565b60006020828403121561348557600080fd5b600061349384828501613278565b91505092915050565b6000602082840312156134ae57600080fd5b600082015167ffffffffffffffff8111156134c857600080fd5b6134d484828501613338565b91505092915050565b600080604083850312156134f057600080fd5b600083013567ffffffffffffffff81111561350a57600080fd5b613516858286016132e2565b925050602083013567ffffffffffffffff81111561353357600080fd5b61353f858286016132e2565b9150509250929050565b60008060006060848603121561355e57600080fd5b600084013567ffffffffffffffff81111561357857600080fd5b613584868287016132e2565b935050602084013567ffffffffffffffff8111156135a157600080fd5b6135ad868287016132e2565b925050604084013567ffffffffffffffff8111156135ca57600080fd5b6135d6868287016132e2565b9150509250925092565b6000806000606084860312156135f557600080fd5b600084015167ffffffffffffffff81111561360f57600080fd5b61361b86828701613338565b935050602084015167ffffffffffffffff81111561363857600080fd5b61364486828701613338565b925050604084015167ffffffffffffffff81111561366157600080fd5b61366d86828701613338565b9150509250925092565b6000806000806080858703121561368d57600080fd5b600085013567ffffffffffffffff8111156136a757600080fd5b6136b3878288016132e2565b945050602085013567ffffffffffffffff8111156136d057600080fd5b6136dc878288016132e2565b935050604085013567ffffffffffffffff8111156136f957600080fd5b613705878288016132e2565b925050606085013567ffffffffffffffff81111561372257600080fd5b61372e878288016132e2565b91505092959194509250565b600080600080600060a0868803121561375257600080fd5b600086013567ffffffffffffffff81111561376c57600080fd5b613778888289016132e2565b955050602086013567ffffffffffffffff81111561379557600080fd5b6137a1888289016132e2565b945050604086013567ffffffffffffffff8111156137be57600080fd5b6137ca888289016132e2565b935050606086013567ffffffffffffffff8111156137e757600080fd5b6137f3888289016132e2565b925050608086013567ffffffffffffffff81111561381057600080fd5b61381c888289016132e2565b9150509295509295909350565b600061383482614139565b8084526020840193508360208202850161384d8561411a565b60005b84811015613886578383038852613868838351613909565b92506138738261415a565b9150602088019750600181019050613850565b508196508694505050505092915050565b6138a0816141f9565b82525050565b6138af8161420b565b82525050565b6138be8161421d565b82525050565b6138cd8161419d565b82525050565b60006138de8261414f565b8084526138f281602086016020860161423e565b6138fb81614271565b602085010191505092915050565b600061391482614144565b80845261392881602086016020860161423e565b61393181614271565b602085010191505092915050565b60008154600181166000811461395c576001811461397c576139bd565b607f600283041680865260ff1983166020870152604086019350506139bd565b6002820480865260208601955061399285614127565b60005b828110156139b457815481890152600182019150602081019050613995565b80880195505050505b505092915050565b6000601b82527f566f74696e6720686173206e6f742079657420737461727465642e00000000006020830152604082019050919050565b6000601e82527f436f756e74696e6720686173206e6f74207965742066696e69736865642e00006020830152604082019050919050565b6000603382527f49742073686f756c642062652063616c6c656420647572696e6720746865204360208301527f6f756e74696e6753746570322073746174652e000000000000000000000000006040830152606082019050919050565b6000603a82527f49742073686f756c642062652063616c6c656420647572696e6720746865204360208301527f6f756e74696e675374657032206f7220456e642073746174652e0000000000006040830152606082019050919050565b6000603782527f546865206e756d626572206f6620636f756e74657273206973206c657373207460208301527f68616e20746865206d696e696d756d206e756d6265722e0000000000000000006040830152606082019050919050565b6000601382527f566f74696e672068617320737461727465642e000000000000000000000000006020830152604082019050919050565b6000601582527f566f74696e67206973207374696c6c206f70656e2e00000000000000000000006020830152604082019050919050565b6000603382527f49742073686f756c642062652063616c6c656420647572696e6720746865204360208301527f6f756e74696e6753746570312073746174652e000000000000000000000000006040830152606082019050919050565b6000601782527f566f74696e67206973206e6f74206f70656e206e6f772e0000000000000000006020830152604082019050919050565b60006020820190508181036000830152613c668184613829565b905092915050565b6000602082019050613c8360008301846138b5565b92915050565b6000602082019050613c9e60008301846138c4565b92915050565b6000604082019050613cb960008301856138c4565b613cc660208301846138c4565b9392505050565b60006020820190508181036000830152613ce78184613909565b905092915050565b60006020820190508181036000830152613d0981846138d3565b905092915050565b60006040820190508181036000830152613d2b81856138d3565b9050613d3a6020830184613897565b9392505050565b60006040820190508181036000830152613d5b81856138d3565b9050613d6a60208301846138a6565b9392505050565b60006060820190508181036000830152613d8b81866138d3565b9050613d9a60208301856138a6565b613da76040830184613897565b949350505050565b60006040820190508181036000830152613dc981856138d3565b90508181036020830152613ddd81846138d3565b90509392505050565b60006080820190508181036000830152613e0081876138d3565b90508181036020830152613e1481866138d3565b90508181036040830152613e2881856138d3565b90508181036060830152613e3c81846138d3565b905095945050505050565b60006060820190508181036000830152613e6181866138d3565b90508181036020830152613e7581856138d3565b90508181036040830152613e89818461393f565b9050949350505050565b60006060820190508181036000830152613ead81866138d3565b90508181036020830152613ec18185613909565b90508181036040830152613ed58184613909565b9050949350505050565b60006040820190508181036000830152613ef981856138d3565b90508181036020830152613f0d818461393f565b90509392505050565b60006040820190508181036000830152613f308185613909565b90508181036020830152613f4481846138d3565b90509392505050565b60006020820190508181036000830152613f66816139c5565b9050919050565b60006020820190508181036000830152613f86816139fc565b9050919050565b60006020820190508181036000830152613fa681613a33565b9050919050565b60006020820190508181036000830152613fc681613a90565b9050919050565b60006020820190508181036000830152613fe681613aed565b9050919050565b6000602082019050818103600083015261400681613b4a565b9050919050565b6000602082019050818103600083015261402681613b81565b9050919050565b6000602082019050818103600083015261404681613bb8565b9050919050565b6000602082019050818103600083015261406681613c15565b9050919050565b6000604051905081810181811067ffffffffffffffff8211171561409057600080fd5b8060405250919050565b600067ffffffffffffffff8211156140b157600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156140d957600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561410557600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b60008160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600060058210151561419557fe5b819050919050565b6000819050919050565b60006141b282614167565b9050919050565b60006141c482614167565b9050919050565b60006141d682614167565b9050919050565b60006141e882614167565b9050919050565b6000819050919050565b600061420482614167565b9050919050565b600061421682614167565b9050919050565b600061422882614187565b9050919050565b82818337600083830152505050565b60005b8381101561425c578082015181840152602081019050614241565b8381111561426b576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058209f5081f6ccf93cec42851449d0b728bb4bad9407c106f589faacc0ced8201d2c6c6578706572696d656e74616cf50037";

    public static final String ABI =
            "[{\"constant\":true,\"inputs\":[],\"name\":\"getVoteResultStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCandidates\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"voterTableName\",\"type\":\"string\"},{\"name\":\"blankBallot\",\"type\":\"string\"}],\"name\":\"queryVoteStoragePart\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidates\",\"type\":\"string[]\"}],\"name\":\"setCandidates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVoteStorageSumTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"counterTableName\",\"type\":\"string\"},{\"name\":\"systemParameters\",\"type\":\"string\"},{\"name\":\"voteStorage\",\"type\":\"string\"},{\"name\":\"hPointShare\",\"type\":\"string\"},{\"name\":\"decryptedRequest\",\"type\":\"string\"}],\"name\":\"verifyCountRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"voterTableName\",\"type\":\"string\"},{\"name\":\"systemParameters\",\"type\":\"string\"},{\"name\":\"voteRequest\",\"type\":\"string\"}],\"name\":\"verifyBoundedVoteRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"systemParameters\",\"type\":\"string\"},{\"name\":\"voteStorageSum\",\"type\":\"string\"},{\"name\":\"decryptedResultPartStorageSum\",\"type\":\"string\"},{\"name\":\"voteResultRequest\",\"type\":\"string\"}],\"name\":\"verifyVoteResult\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"voterTableName\",\"type\":\"string\"},{\"name\":\"counterTableName\",\"type\":\"string\"}],\"name\":\"init\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"counterTableName\",\"type\":\"string\"},{\"name\":\"counterId\",\"type\":\"string\"},{\"name\":\"hPointShare\",\"type\":\"string\"}],\"name\":\"insertHPointShare\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDecryptedResultPartStorageSumTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"voterTableName\",\"type\":\"string\"},{\"name\":\"systemParameters\",\"type\":\"string\"},{\"name\":\"voteRequest\",\"type\":\"string\"}],\"name\":\"verifyUnboundedVoteRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"counterTableName\",\"type\":\"string\"},{\"name\":\"counterId\",\"type\":\"string\"}],\"name\":\"queryHPointShare\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHPoint\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"nextContractState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]";

    public static final String FUNC_GETVOTERESULTSTORAGE = "getVoteResultStorage";

    public static final String FUNC_GETCANDIDATES = "getCandidates";

    public static final String FUNC_QUERYVOTESTORAGEPART = "queryVoteStoragePart";

    public static final String FUNC_SETCANDIDATES = "setCandidates";

    public static final String FUNC_GETVOTESTORAGESUMTOTAL = "getVoteStorageSumTotal";

    public static final String FUNC_VERIFYCOUNTREQUEST = "verifyCountRequest";

    public static final String FUNC_VERIFYBOUNDEDVOTEREQUEST = "verifyBoundedVoteRequest";

    public static final String FUNC_VERIFYVOTERESULT = "verifyVoteResult";

    public static final String FUNC_INIT = "init";

    public static final String FUNC_INSERTHPOINTSHARE = "insertHPointShare";

    public static final String FUNC_CONTRACTSTATE = "contractState";

    public static final String FUNC_GETDECRYPTEDRESULTPARTSTORAGESUMTOTAL =
            "getDecryptedResultPartStorageSumTotal";

    public static final String FUNC_VERIFYUNBOUNDEDVOTEREQUEST = "verifyUnboundedVoteRequest";

    public static final String FUNC_QUERYHPOINTSHARE = "queryHPointShare";

    public static final String FUNC_GETHPOINT = "getHPoint";

    public static final String FUNC_NEXTCONTRACTSTATE = "nextContractState";

    @Deprecated
    protected AnonymousVotingExamplePerf(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected AnonymousVotingExamplePerf(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected AnonymousVotingExamplePerf(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected AnonymousVotingExamplePerf(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<String> getVoteResultStorage() {
        final Function function =
                new Function(
                        FUNC_GETVOTERESULTSTORAGE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<List> getCandidates() {
        final Function function =
                new Function(
                        FUNC_GETCANDIDATES,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result =
                                (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<List> queryVoteStoragePart(String voterTableName, String blankBallot) {
        final Function function =
                new Function(
                        FUNC_QUERYVOTESTORAGEPART,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(blankBallot)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result =
                                (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setCandidates(List<String> candidates) {
        final Function function =
                new Function(
                        FUNC_SETCANDIDATES,
                        Arrays.<Type>asList(
                                candidates.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        candidates,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setCandidates(List<String> candidates, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETCANDIDATES,
                        Arrays.<Type>asList(
                                candidates.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        candidates,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setCandidatesSeq(List<String> candidates) {
        final Function function =
                new Function(
                        FUNC_SETCANDIDATES,
                        Arrays.<Type>asList(
                                candidates.isEmpty()
                                        ? org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty(
                                                "string[]")
                                        : new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<
                                                org.fisco.bcos.web3j.abi.datatypes.Utf8String>(
                                                org.fisco.bcos.web3j.abi.Utils.typeMap(
                                                        candidates,
                                                        org.fisco.bcos.web3j.abi.datatypes
                                                                .Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<String> getVoteStorageSumTotal() {
        final Function function =
                new Function(
                        FUNC_GETVOTESTORAGESUMTOTAL,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> verifyCountRequest(
            String counterTableName,
            String systemParameters,
            String voteStorage,
            String hPointShare,
            String decryptedRequest) {
        final Function function =
                new Function(
                        FUNC_VERIFYCOUNTREQUEST,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(counterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(systemParameters),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voteStorage),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(hPointShare),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        decryptedRequest)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void verifyCountRequest(
            String counterTableName,
            String systemParameters,
            String voteStorage,
            String hPointShare,
            String decryptedRequest,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_VERIFYCOUNTREQUEST,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(counterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(systemParameters),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voteStorage),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(hPointShare),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        decryptedRequest)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String verifyCountRequestSeq(
            String counterTableName,
            String systemParameters,
            String voteStorage,
            String hPointShare,
            String decryptedRequest) {
        final Function function =
                new Function(
                        FUNC_VERIFYCOUNTREQUEST,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(counterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(systemParameters),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voteStorage),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(hPointShare),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        decryptedRequest)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> verifyBoundedVoteRequest(
            String voterTableName, String systemParameters, String voteRequest) {
        final Function function =
                new Function(
                        FUNC_VERIFYBOUNDEDVOTEREQUEST,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(systemParameters),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voteRequest)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void verifyBoundedVoteRequest(
            String voterTableName,
            String systemParameters,
            String voteRequest,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_VERIFYBOUNDEDVOTEREQUEST,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(systemParameters),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voteRequest)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String verifyBoundedVoteRequestSeq(
            String voterTableName, String systemParameters, String voteRequest) {
        final Function function =
                new Function(
                        FUNC_VERIFYBOUNDEDVOTEREQUEST,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(systemParameters),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voteRequest)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> verifyVoteResult(
            String systemParameters,
            String voteStorageSum,
            String decryptedResultPartStorageSum,
            String voteResultRequest) {
        final Function function =
                new Function(
                        FUNC_VERIFYVOTERESULT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(systemParameters),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voteStorageSum),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        decryptedResultPartStorageSum),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        voteResultRequest)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void verifyVoteResult(
            String systemParameters,
            String voteStorageSum,
            String decryptedResultPartStorageSum,
            String voteResultRequest,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_VERIFYVOTERESULT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(systemParameters),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voteStorageSum),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        decryptedResultPartStorageSum),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        voteResultRequest)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String verifyVoteResultSeq(
            String systemParameters,
            String voteStorageSum,
            String decryptedResultPartStorageSum,
            String voteResultRequest) {
        final Function function =
                new Function(
                        FUNC_VERIFYVOTERESULT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(systemParameters),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voteStorageSum),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        decryptedResultPartStorageSum),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        voteResultRequest)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> init(String voterTableName, String counterTableName) {
        final Function function =
                new Function(
                        FUNC_INIT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        counterTableName)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void init(
            String voterTableName, String counterTableName, TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_INIT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        counterTableName)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String initSeq(String voterTableName, String counterTableName) {
        final Function function =
                new Function(
                        FUNC_INIT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(
                                        counterTableName)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> insertHPointShare(
            String counterTableName, String counterId, String hPointShare) {
        final Function function =
                new Function(
                        FUNC_INSERTHPOINTSHARE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(counterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(counterId),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(hPointShare)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void insertHPointShare(
            String counterTableName,
            String counterId,
            String hPointShare,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_INSERTHPOINTSHARE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(counterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(counterId),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(hPointShare)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String insertHPointShareSeq(
            String counterTableName, String counterId, String hPointShare) {
        final Function function =
                new Function(
                        FUNC_INSERTHPOINTSHARE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(counterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(counterId),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(hPointShare)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<BigInteger> contractState() {
        final Function function =
                new Function(
                        FUNC_CONTRACTSTATE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> getDecryptedResultPartStorageSumTotal() {
        final Function function =
                new Function(
                        FUNC_GETDECRYPTEDRESULTPARTSTORAGESUMTOTAL,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> verifyUnboundedVoteRequest(
            String voterTableName, String systemParameters, String voteRequest) {
        final Function function =
                new Function(
                        FUNC_VERIFYUNBOUNDEDVOTEREQUEST,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(systemParameters),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voteRequest)),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void verifyUnboundedVoteRequest(
            String voterTableName,
            String systemParameters,
            String voteRequest,
            TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_VERIFYUNBOUNDEDVOTEREQUEST,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(systemParameters),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voteRequest)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String verifyUnboundedVoteRequestSeq(
            String voterTableName, String systemParameters, String voteRequest) {
        final Function function =
                new Function(
                        FUNC_VERIFYUNBOUNDEDVOTEREQUEST,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(systemParameters),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(voteRequest)),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<List> queryHPointShare(String counterTableName, String counterId) {
        final Function function =
                new Function(
                        FUNC_QUERYHPOINTSHARE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(counterTableName),
                                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(counterId)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result =
                                (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<String> getHPoint() {
        final Function function =
                new Function(
                        FUNC_GETHPOINT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> nextContractState() {
        final Function function =
                new Function(
                        FUNC_NEXTCONTRACTSTATE,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void nextContractState(TransactionSucCallback callback) {
        final Function function =
                new Function(
                        FUNC_NEXTCONTRACTSTATE,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String nextContractStateSeq() {
        final Function function =
                new Function(
                        FUNC_NEXTCONTRACTSTATE,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    @Deprecated
    public static AnonymousVotingExamplePerf load(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        return new AnonymousVotingExamplePerf(
                contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static AnonymousVotingExamplePerf load(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        return new AnonymousVotingExamplePerf(
                contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static AnonymousVotingExamplePerf load(
            String contractAddress,
            Web3j web3j,
            Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new AnonymousVotingExamplePerf(
                contractAddress, web3j, credentials, contractGasProvider);
    }

    public static AnonymousVotingExamplePerf load(
            String contractAddress,
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        return new AnonymousVotingExamplePerf(
                contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<AnonymousVotingExamplePerf> deploy(
            Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(
                AnonymousVotingExamplePerf.class,
                web3j,
                credentials,
                contractGasProvider,
                BINARY,
                "");
    }

    public static RemoteCall<AnonymousVotingExamplePerf> deploy(
            Web3j web3j,
            TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(
                AnonymousVotingExamplePerf.class,
                web3j,
                transactionManager,
                contractGasProvider,
                BINARY,
                "");
    }

    @Deprecated
    public static RemoteCall<AnonymousVotingExamplePerf> deploy(
            Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(
                AnonymousVotingExamplePerf.class,
                web3j,
                credentials,
                gasPrice,
                gasLimit,
                BINARY,
                "");
    }

    @Deprecated
    public static RemoteCall<AnonymousVotingExamplePerf> deploy(
            Web3j web3j,
            TransactionManager transactionManager,
            BigInteger gasPrice,
            BigInteger gasLimit) {
        return deployRemoteCall(
                AnonymousVotingExamplePerf.class,
                web3j,
                transactionManager,
                gasPrice,
                gasLimit,
                BINARY,
                "");
    }
}
